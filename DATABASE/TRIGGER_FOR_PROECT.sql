USE MASTER
GO

USE ExamManagementDB
GO
 --KHI THÊM 1 HỌC SINH THÌ MẶC ĐỊNH THÊM 1 VÀO SỈ SỐ LỚP
IF OBJECT_ID('UTR_STUDENTS_INSERT','TR') IS NOT NULL
	DROP TRIGGER UTR_STUDENTS_INSERT
GO
CREATE TRIGGER UTR_STUDENTS_INSERT
ON STUDENTS
FOR INSERT
AS
BEGIN
	DECLARE @MALOP VARCHAR(10),@SISOHIENTAI INT=0;
	SELECT @MALOP =I.CLASSID FROM inserted I;
	IF @MALOP NOT IN(SELECT C.CLASSID FROM CLASSES C)
	BEGIN
		ROLLBACK TRANSACTION;
	END
	SELECT @SISOHIENTAI=C.QUANTITY FROM CLASSES C WHERE C.CLASSID=@MALOP;
	SET @SISOHIENTAI=@SISOHIENTAI+1;
	UPDATE CLASSES SET QUANTITY=@SISOHIENTAI WHERE CLASSID=@MALOP

END
GO


USE ExamManagementDB
GO
--KHI 1 HS CHUYỂN LỚP HOẶC NGHỈ HỌC THÌ GIẢM SỈ SỐ LỚP CŨ, TĂNG SỈ SỐ LỚP MỚI
IF OBJECT_ID('UTR_STUDENTS_UPDATE_CLASSID_OR_DELETE','TR') IS NOT NULL
	DROP TRIGGER UTR_STUDENTS_UPDATE_CLASSID_OR_DELETE 
GO
CREATE TRIGGER UTR_STUDENTS_UPDATE_CLASSID_OR_DELETE
ON STUDENTS
FOR UPDATE,DELETE
AS
BEGIN
		DECLARE @MALOPCU VARCHAR(10) , @MALOPMOI VARCHAR(10) , @SISOLOPCU INT=0, @SISOLOPMOI INT =0;
		
		SELECT @MALOPCU = D.CLASSID FROM deleted D;
		SELECT @SISOLOPCU=C.QUANTITY FROM CLASSES C WHERE C.CLASSID=@MALOPCU;

		SELECT @MALOPMOI =I.CLASSID FROM inserted I;
		SELECT @SISOLOPMOI=C.QUANTITY FROM CLASSES C WHERE C.CLASSID=@MALOPMOI;

		IF @MALOPMOI NOT IN(SELECT C.CLASSID FROM CLASSES C)
		BEGIN
			ROLLBACK TRANSACTION;
		END

		SET @SISOLOPCU=@SISOLOPCU-1;
		SET @SISOLOPMOI=@SISOLOPMOI+1;

		UPDATE CLASSES SET QUANTITY=@SISOLOPCU WHERE CLASSID=@MALOPCU;
		UPDATE CLASSES SET QUANTITY=@SISOLOPMOI WHERE CLASSID=@MALOPMOI;
END
GO



USE ExamManagementDB
GO
--KHI NGƯỜI DÙNG TÁC ĐỘNG VÀO BẢNG SỈ SỐ LỚP THÌ TỰ ĐỘNG COUNT LẠI
IF OBJECT_ID('UTR_CLASSED_UPDATE_QUANTITY','TR') IS NOT NULL
	DROP TRIGGER UTR_CLASSED_UPDATE_QUANTITY 
GO
CREATE TRIGGER UTR_CLASSED_UPDATE_QUANTITY
ON CLASSES
FOR UPDATE
AS
BEGIN
	DECLARE @SISO INT = 0, @MALOP VARCHAR(10), @MAKHOI VARCHAR(10);
	SELECT @MALOP =I.CLASSID FROM inserted I;
	SELECT @MAKHOI = I.GRADEID FROM inserted I;

	IF @MAKHOI NOT IN (SELECT G.GRADEID FROM GRADE G)
	BEGIN
		ROLLBACK TRANSACTION;
	END

	SELECT @SISO = COUNT(*) FROM STUDENTS ST WHERE ST.CLASSID=@MALOP;

	UPDATE CLASSES SET QUANTITY=@SISO WHERE CLASSID=@MALOP;
END
GO





USE ExamManagementDB
GO
--KHI 1 MÃ KHỐI KHÔNG TỒN TẠI
IF OBJECT_ID('UTR_CLASSED_INSERT_GRADID','TR') IS NOT NULL
	DROP TRIGGER UTR_CLASSED_INSERT_GRADID 
GO
CREATE TRIGGER UTR_CLASSED_INSERT_GRADID
ON CLASSES
FOR INSERT
AS
BEGIN
	DECLARE @MAKHOI VARCHAR(10);
	SELECT @MAKHOI = I.GRADEID FROM inserted I;
	IF @MAKHOI NOT IN (SELECT G.GRADEID FROM GRADE G)
	BEGIN
		ROLLBACK TRANSACTION;
	END
END
GO



--USE ExamManagementDB
--GO
----KHÓA THUỘC TÍNH KHI 1 HỌC SINH LUYỆN TẬP
--IF OBJECT_ID('UTR_TRAINING_ADD_UPDATE_PERSONALID','TR') IS NOT NULL
--	DROP TRIGGER UTR_TRAINING_ADD_UPDATE_PERSONALID 
--GO
--CREATE TRIGGER UTR_TRAINING_ADD_UPDATE_PERSONALID 
--ON TRAINING
--FOR INSERT, UPDATE
--AS
--BEGIN
--	DECLARE @PERSONALID VARCHAR(10), @OVERALL FLOAT =0, @TOTALCOMPLETE INT =0;

--	SELECT @TOTALCOMPLETE = I.TOTALCOMPLETED FROM inserted I
--	SELECT @OVERALL = I.OVERALLPROPERBILITY FROM inserted I
--	SELECT @PERSONALID = I.PERSONALID FROM inserted I

--	IF @PERSONALID NOT IN (SELECT U.PERSONALID FROM USERACCOUNTS U)
--	BEGIN
--		ROLLBACK TRANSACTION;
--	END

--	IF @OVERALL <0 OR @OVERALL >1 OR @TOTALCOMPLETE<0
--	BEGIN
--		ROLLBACK TRANSACTION;
--	END
--END
--GO




USE ExamManagementDB
GO
--KHÓA THUỘC TÍNH KHI TẠO 1 HISTORY VÀ THAY ĐỔI LẠI TRAINING
IF OBJECT_ID('UTR_TRAINING_HISTORY_INSERT','TR') IS NOT NULL
	DROP TRIGGER UTR_TRAINING_HISTORY_INSERT 
GO
CREATE TRIGGER UTR_TRAINING_HISTORY_INSERT
ON TRAININGHISTORY
FOR INSERT, UPDATE
AS
BEGIN
	DECLARE @PERSONALID VARCHAR(10), @TRAININGID VARCHAR(10), @TOPICID VARCHAR(10),
			@SOCAUSAI INT =0, @SOCAUDUNG INT =0,@TONGSOCAU INT=0, @XACSUATHIENTAI FLOAT =0, @XACSUATTONG FLOAT =0, @SOBAICU INT =0;

	SELECT @PERSONALID = I.PERSONALID FROM inserted I
	SELECT @TRAININGID = I.TRAININGID FROM inserted I
	SELECT @TOPICID = I.TOPICID FROM inserted I
	SELECT @SOCAUSAI = I.TOTALINCORRECT FROM inserted I
	SELECT @SOCAUDUNG = I.TOTALCORRECT FROM inserted I

	IF @PERSONALID NOT IN (SELECT TRA.PERSONALID FROM TRAINING TRA) 
		OR @TRAININGID NOT IN (SELECT TRA.TRAININGID FROM TRAINING TRA)
		OR @TOPICID NOT IN (SELECT TP.TOPICID FROM TOPIC TP)
	BEGIN
		ROLLBACK TRANSACTION;
	END

	IF(@SOCAUDUNG >0 AND @SOCAUSAI>0)
	BEGIN
		SELECT @TONGSOCAU = TRAIN.TOTALCOMPLETED FROM TRAINING TRAIN
		IF @TONGSOCAU=NULL
			SET @TONGSOCAU=0

		--TOÀN BỘ SỐ CÂU MÀ NGƯỜI DÙNG NÀY ĐÃ TRẢI QUA
		SET @TONGSOCAU= @TONGSOCAU+@SOCAUDUNG+@SOCAUSAI;
		SET @XACSUATHIENTAI = CAST( @SOCAUDUNG AS FLOAT)/ CAST( (@SOCAUDUNG+ @SOCAUSAI) AS FLOAT); -- XÁC SUẤT : SỐ CÂU LÀM ĐƯỢC / TOÀN BỘ. VD : 10/40 = 0.25 = 25%
		SELECT  @XACSUATTONG =SUM(HIS.OVERALLPROPERBILITY) FROM TRAININGHISTORY HIS WHERE HIS.PERSONALID=@PERSONALID
		SELECT @SOBAICU = COUNT (HIS.OVERALLPROPERBILITY) FROM TRAININGHISTORY HIS WHERE HIS.PERSONALID=@PERSONALID
		SET @XACSUATTONG = @XACSUATTONG + @XACSUATHIENTAI;
		SET @SOBAICU=@SOBAICU+1;
	
		SET @XACSUATTONG=@XACSUATTONG / CAST( @SOBAICU AS FLOAT);

		UPDATE TRAINING SET OVERALLPROPERBILITY=@XACSUATTONG, TOTALCOMPLETED =@TONGSOCAU WHERE TRAININGID = @TRAININGID AND PERSONALID=@PERSONALID
	END
END
GO




--USE ExamManagementDB
--GO
---- VÀ CẬP NHẬT LẠI TRAINING NẾU HISTORY CÓ XÓA
--IF OBJECT_ID('UTR_TRAINING_HISTORY_DELETE','TR') IS NOT NULL
--	DROP TRIGGER UTR_TRAINING_HISTORY_DELETE 
--GO
--CREATE TRIGGER UTR_TRAINING_HISTORY_DELETE
--ON TRAININGHISTORY
--FOR DELETE
--AS
--BEGIN
	
--	DECLARE @PERSONALID VARCHAR(10), @TRAININGID VARCHAR(10), @TOPICID VARCHAR(10),
--			@SOCAUSAI INT =0, @SOCAUDUNG INT =0,@TONGSOCAU INT=0, @XACSUATHIENTAI FLOAT =0, @XACSUATTONG FLOAT =0, @SOBAICU INT =0;

	

--	SELECT @TRAININGID = I.TRAININGID FROM deleted I
--	SELECT @TOPICID = I.TOPICID FROM deleted I
--	SELECT @SOCAUSAI = I.TOTALINCORRECT FROM deleted I
--	SELECT @SOCAUDUNG = I.TOTALCORRECT FROM deleted I
--	IF EXISTS (SELECT * FROM TRAININGHISTORY HIS WHERE HIS.TRAININGID=@TRAININGID)
--	BEGIN
--		SELECT @TONGSOCAU = TRAIN.TOTALCOMPLETED FROM TRAINING TRAIN

--		--TOÀN BỘ SỐ CÂU MÀ NGƯỜI DÙNG NÀY ĐÃ TRẢI QUA trừ cái vừa xóa
--		SET @TONGSOCAU= @TONGSOCAU-(@SOCAUDUNG+@SOCAUSAI);
--		SELECT  @XACSUATTONG =SUM(HIS.OVERALLPROPERBILITY) FROM TRAININGHISTORY HIS WHERE HIS.PERSONALID=@PERSONALID and HIS.TRAININGID !=@TRAININGID
--		SELECT @SOBAICU = COUNT (HIS.OVERALLPROPERBILITY) FROM TRAININGHISTORY HIS WHERE HIS.PERSONALID=@PERSONALID and HIS.TRAININGID !=@TRAININGID

--		SET @XACSUATTONG=@XACSUATTONG / CAST( @SOBAICU AS FLOAT);
--	END
--	UPDATE TRAINING SET OVERALLPROPERBILITY=@XACSUATTONG, TOTALCOMPLETED =@TONGSOCAU WHERE TRAININGID = @TRAININGID
--END
--GO




USE ExamManagementDB
GO
--mỗi khi có THÊM THỐNG KÊ VỀ 1 CÂU HỎI NÀO ĐÓ TRONG 1 BÀI THI CỦA 1 HỌC SINH NÀO ĐÓ
-- CẬP NHẬT LẠI BẢNG PERCENTAGE
IF OBJECT_ID('UTR_STATISTIC_INSERT','TR') IS NOT NULL
	DROP TRIGGER UTR_STATISTIC_INSERT 
GO
CREATE TRIGGER UTR_STATISTIC_INSERT
ON STATISTIC
FOR INSERT
AS
BEGIN
	DECLARE @EXAMID VARCHAR(10), @TOTALCORRECT INT =0, @TOTALINCORRECT INT = 0,
			@QUESTIONID VARCHAR(10), @TESTID VARCHAR(10),
			 @ISCORRECT INT =0;

	SELECT @TESTID= I.TESTID FROM inserted I;
	SELECT @QUESTIONID= I.QUESTIONID FROM inserted I;
	SELECT @ISCORRECT = I.ISCORRECT FROM inserted I;

	SELECT TOP 1 @EXAMID = ED.EXAMID FROM EXAM_DETAILS ED JOIN TESTS T ON T.TOPICID =ED.TOPICID WHERE T.TESTID=@TESTID

	--NẾU CÂU HỎI VÀ MÃ HỌC KÌ ĐÃ TỒN TẠI TRONG BẢNG PERCENT THÌ CỘNG VÀO
	IF EXISTS (SELECT * FROM PERCENTAGEOFQUESTION PPP WHERE PPP.EXAMID =@EXAMID AND PPP.QUESTIONID=@QUESTIONID)
	BEGIN
		SELECT  @TOTALCORRECT =PPP.TOTALCORRECT FROM PERCENTAGEOFQUESTION PPP WHERE PPP.EXAMID =@EXAMID AND PPP.QUESTIONID=@QUESTIONID;
		SELECT  @TOTALINCORRECT =PPP.TOTALINCORRECT FROM PERCENTAGEOFQUESTION PPP WHERE PPP.EXAMID =@EXAMID AND PPP.QUESTIONID=@QUESTIONID;
		IF @ISCORRECT=0
			BEGIN --NẾU CÂU HIỆN TẠI KO ĐÚNG
				SET @TOTALINCORRECT=@TOTALINCORRECT+1;
			END
		ELSE
			BEGIN
				SET @TOTALCORRECT=@TOTALCORRECT+1;
			END
		UPDATE PERCENTAGEOFQUESTION SET TOTALCORRECT=@TOTALCORRECT, TOTALINCORRECT=@TOTALINCORRECT WHERE EXAMID =@EXAMID AND QUESTIONID=@QUESTIONID;
	END
	--NẾU CHƯA TỒN TẠI THÌ TẠO TRONG BẢNG PERCENT
	ELSE
	BEGIN
		IF @ISCORRECT=0
			BEGIN
				INSERT INTO PERCENTAGEOFQUESTION VALUES (@QUESTIONID,@EXAMID,0,1);
			END
		ELSE
			BEGIN
				INSERT INTO PERCENTAGEOFQUESTION VALUES (@QUESTIONID,@EXAMID,1,0);
			END
	END
END
GO




USE ExamManagementDB
GO
--mỗi khi XÓA THỐNG KÊ VỀ 1 CÂU HỎI NÀO ĐÓ TRONG 1 BÀI THI CỦA 1 HỌC SINH NÀO ĐÓ
-- CẬP NHẬT LẠI BẢNG PERCENTAGE
IF OBJECT_ID('UTR_STATISTIC_DELETE','TR') IS NOT NULL
	DROP TRIGGER UTR_STATISTIC_DELETE 
GO
CREATE TRIGGER UTR_STATISTIC_DELETE
ON STATISTIC
FOR DELETE
AS
BEGIN
	DECLARE @EXAMID VARCHAR(10), @TOTALCORRECT INT =0, @TOTALINCORRECT INT = 0,
			@QUESTIONID VARCHAR(10), @TESTID VARCHAR(10),
			 @ISCORRECT INT =0;

	SELECT @TESTID= I.TESTID FROM deleted I;
	SELECT @QUESTIONID= I.QUESTIONID FROM deleted I;
	SELECT @ISCORRECT = I.ISCORRECT FROM deleted I;

	SELECT TOP 1 @EXAMID = ED.EXAMID FROM EXAM_DETAILS ED JOIN TESTS T ON T.TOPICID =ED.TOPICID WHERE T.TESTID=@TESTID

	IF EXISTS(SELECT * FROM STATISTIC STAT WHERE STAT.QUESTIONID=@QUESTIONID AND STAT.TESTID=@TESTID)
	BEGIN
	SELECT  @TOTALCORRECT =PPP.TOTALCORRECT FROM PERCENTAGEOFQUESTION PPP WHERE PPP.EXAMID =@EXAMID AND PPP.QUESTIONID=@QUESTIONID;
	SELECT  @TOTALINCORRECT =PPP.TOTALINCORRECT FROM PERCENTAGEOFQUESTION PPP WHERE PPP.EXAMID =@EXAMID AND PPP.QUESTIONID=@QUESTIONID;
	IF @ISCORRECT=0
		BEGIN --NẾU CÂU HIỆN TẠI KO ĐÚNG
			SET @TOTALINCORRECT=@TOTALINCORRECT-1;
		END
	ELSE
		BEGIN
			SET @TOTALCORRECT=@TOTALCORRECT-1;
		END
	END
	UPDATE PERCENTAGEOFQUESTION SET TOTALCORRECT=@TOTALCORRECT, TOTALINCORRECT=@TOTALINCORRECT WHERE EXAMID =@EXAMID AND QUESTIONID=@QUESTIONID;
END
GO




USE ExamManagementDB
GO
--mỗi khi THAY ĐỔI THỐNG KÊ VỀ 1 CÂU HỎI NÀO ĐÓ TRONG 1 BÀI THI CỦA 1 HỌC SINH NÀO ĐÓ
-- CẬP NHẬT LẠI BẢNG PERCENTAGE
IF OBJECT_ID('UTR_STATISTIC_UPDATE','TR') IS NOT NULL
	DROP TRIGGER UTR_STATISTIC_UPDATE 
GO
CREATE TRIGGER UTR_STATISTIC_UPDATE
ON STATISTIC
FOR UPDATE
AS
BEGIN
	DECLARE @EXAMID VARCHAR(10), @TOTALCORRECT INT =0, @TOTALINCORRECT INT = 0,
			@QUESTIONID VARCHAR(10), @TESTID VARCHAR(10),
			@ISCORRECT_OLD INT =0, @ISCORRECT_NEW INT =0;

	SELECT @TESTID= I.TESTID FROM deleted I;
	SELECT @QUESTIONID= I.QUESTIONID FROM deleted I;
	SELECT @ISCORRECT_OLD = I.ISCORRECT FROM deleted I;
	SELECT @ISCORRECT_NEW = I.ISCORRECT FROM inserted I;

	SELECT TOP 1 @EXAMID = ED.EXAMID FROM EXAM_DETAILS ED JOIN TESTS T ON T.TOPICID =ED.TOPICID WHERE T.TESTID=@TESTID

	SELECT  @TOTALCORRECT =PPP.TOTALCORRECT FROM PERCENTAGEOFQUESTION PPP WHERE PPP.EXAMID =@EXAMID AND PPP.QUESTIONID=@QUESTIONID;
	SELECT  @TOTALINCORRECT =PPP.TOTALINCORRECT FROM PERCENTAGEOFQUESTION PPP WHERE PPP.EXAMID =@EXAMID AND PPP.QUESTIONID=@QUESTIONID;
	--NẾU CHỈ SỐ CŨ LÀ KO ĐÚNG THAY ĐỔI SANG ĐÚNG
		IF @ISCORRECT_OLD=0 AND @ISCORRECT_NEW = 1
			BEGIN --NẾU CÂU HIỆN TẠI KO ĐÚNG
				SET @TOTALINCORRECT=@TOTALINCORRECT-1;
				SET @TOTALCORRECT=@TOTALCORRECT+1;
			END
			-- NẾU TỪ ĐÚNG THÀNH SAI
		IF @ISCORRECT_OLD=1 AND @ISCORRECT_NEW = 0
			BEGIN
				SET @TOTALINCORRECT=@TOTALINCORRECT+1;
				SET @TOTALCORRECT=@TOTALCORRECT-1;
			END
	--  NẾU CÁI MỚI KHÔNG CÁC CÁI CŨ THÌ KO THAY ĐỔI SỐ ĐÚNG SAI GÌ CẢ
	UPDATE PERCENTAGEOFQUESTION SET TOTALCORRECT=@TOTALCORRECT, TOTALINCORRECT=@TOTALINCORRECT WHERE EXAMID =@EXAMID AND QUESTIONID=@QUESTIONID;
END
GO





USE ExamManagementDB
GO
--KHI NGƯỜI DÙNG THAO TÁC(UPDATE) VÀO TỔNG SỐ ĐÚNG/SAI CỦA BẢNG PercentageOfQuestion
IF OBJECT_ID('UTR_PercentageOfQuestion_UPDATE','TR') IS NOT NULL
	DROP TRIGGER UTR_PercentageOfQuestion_UPDATE 
GO
CREATE TRIGGER UTR_PercentageOfQuestion_UPDATE
ON PercentageOfQuestion
FOR UPDATE
AS
BEGIN
	DECLARE @EXAMID VARCHAR(10), @QUESTIONID VARCHAR(10), @TOPICID VARCHAR(10), @PERSONALID VARCHAR(10), @TOTALCORRECT INT =0, @TOTALINCORRECT INT=0;

	SELECT @EXAMID =D.EXAMID FROM deleted D;
	SELECT @QUESTIONID = D.QUESTIONID FROM deleted D;

	
	SELECT @TOTALCORRECT =		COUNT(STAT.ISCORRECT)
								FROM STATISTIC STAT JOIN TESTS T
								ON T.TESTID = STAT.TESTID
								JOIN EXAM_DETAILS EXD
								ON EXD.TOPICID = T.TOPICID
								WHERE EXD.EXAMID =@EXAMID AND STAT.QUESTIONID=@QUESTIONID AND ISCORRECT = 1;


	SELECT @TOTALINCORRECT =	COUNT(STAT.ISCORRECT)
								FROM STATISTIC STAT JOIN TESTS T
								ON T.TESTID = STAT.TESTID
								JOIN EXAM_DETAILS EXD
								ON EXD.TOPICID = T.TOPICID
								WHERE EXD.EXAMID =@EXAMID AND STAT.QUESTIONID=@QUESTIONID AND ISCORRECT = 0;



	IF UPDATE (TotalCorrect)
	BEGIN
		UPDATE PERCENTAGEOFQUESTION SET TOTALCORRECT=@TOTALCORRECT WHERE QUESTIONID=@QUESTIONID AND EXAMID = @EXAMID
	END

	IF UPDATE (TotalIncorrect)
	BEGIN
		UPDATE PERCENTAGEOFQUESTION SET TOTALINCORRECT=@TOTALINCORRECT WHERE QUESTIONID=@QUESTIONID AND EXAMID = @EXAMID
	END
END
GO
