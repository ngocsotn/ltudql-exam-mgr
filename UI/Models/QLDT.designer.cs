#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UI.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ExamManagementDB")]
	public partial class QLDTDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertADMINISTRATOR(ADMINISTRATOR instance);
    partial void UpdateADMINISTRATOR(ADMINISTRATOR instance);
    partial void DeleteADMINISTRATOR(ADMINISTRATOR instance);
    partial void InsertTRAININGHISTORY(TRAININGHISTORY instance);
    partial void UpdateTRAININGHISTORY(TRAININGHISTORY instance);
    partial void DeleteTRAININGHISTORY(TRAININGHISTORY instance);
    partial void InsertCLASS(CLASS instance);
    partial void UpdateCLASS(CLASS instance);
    partial void DeleteCLASS(CLASS instance);
    partial void InsertEXAM(EXAM instance);
    partial void UpdateEXAM(EXAM instance);
    partial void DeleteEXAM(EXAM instance);
    partial void InsertEXAM_DETAIL(EXAM_DETAIL instance);
    partial void UpdateEXAM_DETAIL(EXAM_DETAIL instance);
    partial void DeleteEXAM_DETAIL(EXAM_DETAIL instance);
    partial void InsertGRADE(GRADE instance);
    partial void UpdateGRADE(GRADE instance);
    partial void DeleteGRADE(GRADE instance);
    partial void InsertPERCENTAGEOFQUESTION(PERCENTAGEOFQUESTION instance);
    partial void UpdatePERCENTAGEOFQUESTION(PERCENTAGEOFQUESTION instance);
    partial void DeletePERCENTAGEOFQUESTION(PERCENTAGEOFQUESTION instance);
    partial void InsertPERMISSION(PERMISSION instance);
    partial void UpdatePERMISSION(PERMISSION instance);
    partial void DeletePERMISSION(PERMISSION instance);
    partial void InsertPROCESS(PROCESS instance);
    partial void UpdatePROCESS(PROCESS instance);
    partial void DeletePROCESS(PROCESS instance);
    partial void InsertQUESTION(QUESTION instance);
    partial void UpdateQUESTION(QUESTION instance);
    partial void DeleteQUESTION(QUESTION instance);
    partial void InsertQUESTIONSSTORAGE(QUESTIONSSTORAGE instance);
    partial void UpdateQUESTIONSSTORAGE(QUESTIONSSTORAGE instance);
    partial void DeleteQUESTIONSSTORAGE(QUESTIONSSTORAGE instance);
    partial void InsertRESULTOFTEST(RESULTOFTEST instance);
    partial void UpdateRESULTOFTEST(RESULTOFTEST instance);
    partial void DeleteRESULTOFTEST(RESULTOFTEST instance);
    partial void InsertSCHEDULE(SCHEDULE instance);
    partial void UpdateSCHEDULE(SCHEDULE instance);
    partial void DeleteSCHEDULE(SCHEDULE instance);
    partial void InsertSEMESTER(SEMESTER instance);
    partial void UpdateSEMESTER(SEMESTER instance);
    partial void DeleteSEMESTER(SEMESTER instance);
    partial void InsertSTATISTIC(STATISTIC instance);
    partial void UpdateSTATISTIC(STATISTIC instance);
    partial void DeleteSTATISTIC(STATISTIC instance);
    partial void InsertSTUDENT(STUDENT instance);
    partial void UpdateSTUDENT(STUDENT instance);
    partial void DeleteSTUDENT(STUDENT instance);
    partial void InsertSUBJECT(SUBJECT instance);
    partial void UpdateSUBJECT(SUBJECT instance);
    partial void DeleteSUBJECT(SUBJECT instance);
    partial void InsertTEACHER(TEACHER instance);
    partial void UpdateTEACHER(TEACHER instance);
    partial void DeleteTEACHER(TEACHER instance);
    partial void InsertTEST(TEST instance);
    partial void UpdateTEST(TEST instance);
    partial void DeleteTEST(TEST instance);
    partial void InsertTOPIC(TOPIC instance);
    partial void UpdateTOPIC(TOPIC instance);
    partial void DeleteTOPIC(TOPIC instance);
    partial void InsertTOPIC_DETAIL(TOPIC_DETAIL instance);
    partial void UpdateTOPIC_DETAIL(TOPIC_DETAIL instance);
    partial void DeleteTOPIC_DETAIL(TOPIC_DETAIL instance);
    partial void InsertTRAINING(TRAINING instance);
    partial void UpdateTRAINING(TRAINING instance);
    partial void DeleteTRAINING(TRAINING instance);
    partial void InsertUSERACCOUNT(USERACCOUNT instance);
    partial void UpdateUSERACCOUNT(USERACCOUNT instance);
    partial void DeleteUSERACCOUNT(USERACCOUNT instance);
    #endregion
		
		public QLDTDataContext() : 
				base("Data Source=GHOST8250\\NGOC;Initial Catalog=ExamManagementDB;Integrated Security=T" +
						"rue", mappingSource)
		{
			OnCreated();
		}
		
		public QLDTDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLDTDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLDTDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLDTDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ADMINISTRATOR> ADMINISTRATORs
		{
			get
			{
				return this.GetTable<ADMINISTRATOR>();
			}
		}
		
		public System.Data.Linq.Table<TRAININGHISTORY> TRAININGHISTORies
		{
			get
			{
				return this.GetTable<TRAININGHISTORY>();
			}
		}
		
		public System.Data.Linq.Table<CLASS> CLASSes
		{
			get
			{
				return this.GetTable<CLASS>();
			}
		}
		
		public System.Data.Linq.Table<EXAM> EXAMs
		{
			get
			{
				return this.GetTable<EXAM>();
			}
		}
		
		public System.Data.Linq.Table<EXAM_DETAIL> EXAM_DETAILs
		{
			get
			{
				return this.GetTable<EXAM_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<GRADE> GRADEs
		{
			get
			{
				return this.GetTable<GRADE>();
			}
		}
		
		public System.Data.Linq.Table<PERCENTAGEOFQUESTION> PERCENTAGEOFQUESTIONs
		{
			get
			{
				return this.GetTable<PERCENTAGEOFQUESTION>();
			}
		}
		
		public System.Data.Linq.Table<PERMISSION> PERMISSIONs
		{
			get
			{
				return this.GetTable<PERMISSION>();
			}
		}
		
		public System.Data.Linq.Table<PROCESS> PROCESSes
		{
			get
			{
				return this.GetTable<PROCESS>();
			}
		}
		
		public System.Data.Linq.Table<QUESTION> QUESTIONs
		{
			get
			{
				return this.GetTable<QUESTION>();
			}
		}
		
		public System.Data.Linq.Table<QUESTIONSSTORAGE> QUESTIONSSTORAGEs
		{
			get
			{
				return this.GetTable<QUESTIONSSTORAGE>();
			}
		}
		
		public System.Data.Linq.Table<RESULTOFTEST> RESULTOFTESTs
		{
			get
			{
				return this.GetTable<RESULTOFTEST>();
			}
		}
		
		public System.Data.Linq.Table<SCHEDULE> SCHEDULEs
		{
			get
			{
				return this.GetTable<SCHEDULE>();
			}
		}
		
		public System.Data.Linq.Table<SEMESTER> SEMESTERs
		{
			get
			{
				return this.GetTable<SEMESTER>();
			}
		}
		
		public System.Data.Linq.Table<STATISTIC> STATISTICs
		{
			get
			{
				return this.GetTable<STATISTIC>();
			}
		}
		
		public System.Data.Linq.Table<STUDENT> STUDENTs
		{
			get
			{
				return this.GetTable<STUDENT>();
			}
		}
		
		public System.Data.Linq.Table<SUBJECT> SUBJECTs
		{
			get
			{
				return this.GetTable<SUBJECT>();
			}
		}
		
		public System.Data.Linq.Table<TEACHER> TEACHERs
		{
			get
			{
				return this.GetTable<TEACHER>();
			}
		}
		
		public System.Data.Linq.Table<TEST> TESTs
		{
			get
			{
				return this.GetTable<TEST>();
			}
		}
		
		public System.Data.Linq.Table<TOPIC> TOPICs
		{
			get
			{
				return this.GetTable<TOPIC>();
			}
		}
		
		public System.Data.Linq.Table<TOPIC_DETAIL> TOPIC_DETAILs
		{
			get
			{
				return this.GetTable<TOPIC_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<TRAINING> TRAININGs
		{
			get
			{
				return this.GetTable<TRAINING>();
			}
		}
		
		public System.Data.Linq.Table<USERACCOUNT> USERACCOUNTs
		{
			get
			{
				return this.GetTable<USERACCOUNT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ADMINISTRATORS")]
	public partial class ADMINISTRATOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PERSONALID;
		
		private string _FULLNAME;
		
		private string _GENDER;
		
		private System.Nullable<System.DateTime> _DATEOFBIRTH;
		
		private string _ADMINONLYKEY;
		
		private string _ADR;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnFULLNAMEChanging(string value);
    partial void OnFULLNAMEChanged();
    partial void OnGENDERChanging(string value);
    partial void OnGENDERChanged();
    partial void OnDATEOFBIRTHChanging(System.Nullable<System.DateTime> value);
    partial void OnDATEOFBIRTHChanged();
    partial void OnADMINONLYKEYChanging(string value);
    partial void OnADMINONLYKEYChanged();
    partial void OnADRChanging(string value);
    partial void OnADRChanged();
    #endregion
		
		public ADMINISTRATOR()
		{
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FULLNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FULLNAME
		{
			get
			{
				return this._FULLNAME;
			}
			set
			{
				if ((this._FULLNAME != value))
				{
					this.OnFULLNAMEChanging(value);
					this.SendPropertyChanging();
					this._FULLNAME = value;
					this.SendPropertyChanged("FULLNAME");
					this.OnFULLNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string GENDER
		{
			get
			{
				return this._GENDER;
			}
			set
			{
				if ((this._GENDER != value))
				{
					this.OnGENDERChanging(value);
					this.SendPropertyChanging();
					this._GENDER = value;
					this.SendPropertyChanged("GENDER");
					this.OnGENDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEOFBIRTH", DbType="Date")]
		public System.Nullable<System.DateTime> DATEOFBIRTH
		{
			get
			{
				return this._DATEOFBIRTH;
			}
			set
			{
				if ((this._DATEOFBIRTH != value))
				{
					this.OnDATEOFBIRTHChanging(value);
					this.SendPropertyChanging();
					this._DATEOFBIRTH = value;
					this.SendPropertyChanged("DATEOFBIRTH");
					this.OnDATEOFBIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADMINONLYKEY", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ADMINONLYKEY
		{
			get
			{
				return this._ADMINONLYKEY;
			}
			set
			{
				if ((this._ADMINONLYKEY != value))
				{
					this.OnADMINONLYKEYChanging(value);
					this.SendPropertyChanging();
					this._ADMINONLYKEY = value;
					this.SendPropertyChanged("ADMINONLYKEY");
					this.OnADMINONLYKEYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADR", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ADR
		{
			get
			{
				return this._ADR;
			}
			set
			{
				if ((this._ADR != value))
				{
					this.OnADRChanging(value);
					this.SendPropertyChanging();
					this._ADR = value;
					this.SendPropertyChanged("ADR");
					this.OnADRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_ADMINISTRATOR", Storage="_USERACCOUNT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.ADMINISTRATOR = null;
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.ADMINISTRATOR = this;
						this._PERSONALID = value.PERSONALID;
					}
					else
					{
						this._PERSONALID = default(string);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRAININGHISTORY")]
	public partial class TRAININGHISTORY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TRAININGID;
		
		private string _PERSONALID;
		
		private string _TOPICID;
		
		private System.Nullable<System.DateTime> _TRAININGDATE;
		
		private string _RESULT;
		
		private double _OVERALLPROPERBILITY;
		
		private int _TOTALCORRECT;
		
		private int _TOTALINCORRECT;
		
		private EntityRef<TOPIC> _TOPIC;
		
		private EntityRef<TRAINING> _TRAINING;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTRAININGIDChanging(string value);
    partial void OnTRAININGIDChanged();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnTOPICIDChanging(string value);
    partial void OnTOPICIDChanged();
    partial void OnTRAININGDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnTRAININGDATEChanged();
    partial void OnRESULTChanging(string value);
    partial void OnRESULTChanged();
    partial void OnOVERALLPROPERBILITYChanging(double value);
    partial void OnOVERALLPROPERBILITYChanged();
    partial void OnTOTALCORRECTChanging(int value);
    partial void OnTOTALCORRECTChanged();
    partial void OnTOTALINCORRECTChanging(int value);
    partial void OnTOTALINCORRECTChanged();
    #endregion
		
		public TRAININGHISTORY()
		{
			this._TOPIC = default(EntityRef<TOPIC>);
			this._TRAINING = default(EntityRef<TRAINING>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRAININGID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TRAININGID
		{
			get
			{
				return this._TRAININGID;
			}
			set
			{
				if ((this._TRAININGID != value))
				{
					if (this._TRAINING.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTRAININGIDChanging(value);
					this.SendPropertyChanging();
					this._TRAININGID = value;
					this.SendPropertyChanged("TRAININGID");
					this.OnTRAININGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOPICID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TOPICID
		{
			get
			{
				return this._TOPICID;
			}
			set
			{
				if ((this._TOPICID != value))
				{
					if (this._TOPIC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTOPICIDChanging(value);
					this.SendPropertyChanging();
					this._TOPICID = value;
					this.SendPropertyChanged("TOPICID");
					this.OnTOPICIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRAININGDATE", DbType="Date")]
		public System.Nullable<System.DateTime> TRAININGDATE
		{
			get
			{
				return this._TRAININGDATE;
			}
			set
			{
				if ((this._TRAININGDATE != value))
				{
					this.OnTRAININGDATEChanging(value);
					this.SendPropertyChanging();
					this._TRAININGDATE = value;
					this.SendPropertyChanged("TRAININGDATE");
					this.OnTRAININGDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RESULT", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string RESULT
		{
			get
			{
				return this._RESULT;
			}
			set
			{
				if ((this._RESULT != value))
				{
					this.OnRESULTChanging(value);
					this.SendPropertyChanging();
					this._RESULT = value;
					this.SendPropertyChanged("RESULT");
					this.OnRESULTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OVERALLPROPERBILITY", DbType="Float NOT NULL")]
		public double OVERALLPROPERBILITY
		{
			get
			{
				return this._OVERALLPROPERBILITY;
			}
			set
			{
				if ((this._OVERALLPROPERBILITY != value))
				{
					this.OnOVERALLPROPERBILITYChanging(value);
					this.SendPropertyChanging();
					this._OVERALLPROPERBILITY = value;
					this.SendPropertyChanged("OVERALLPROPERBILITY");
					this.OnOVERALLPROPERBILITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTALCORRECT", DbType="Int NOT NULL")]
		public int TOTALCORRECT
		{
			get
			{
				return this._TOTALCORRECT;
			}
			set
			{
				if ((this._TOTALCORRECT != value))
				{
					this.OnTOTALCORRECTChanging(value);
					this.SendPropertyChanging();
					this._TOTALCORRECT = value;
					this.SendPropertyChanged("TOTALCORRECT");
					this.OnTOTALCORRECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTALINCORRECT", DbType="Int NOT NULL")]
		public int TOTALINCORRECT
		{
			get
			{
				return this._TOTALINCORRECT;
			}
			set
			{
				if ((this._TOTALINCORRECT != value))
				{
					this.OnTOTALINCORRECTChanging(value);
					this.SendPropertyChanging();
					this._TOTALINCORRECT = value;
					this.SendPropertyChanged("TOTALINCORRECT");
					this.OnTOTALINCORRECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOPIC_TRAININGHISTORY", Storage="_TOPIC", ThisKey="TOPICID", OtherKey="TOPICID", IsForeignKey=true)]
		public TOPIC TOPIC
		{
			get
			{
				return this._TOPIC.Entity;
			}
			set
			{
				TOPIC previousValue = this._TOPIC.Entity;
				if (((previousValue != value) 
							|| (this._TOPIC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TOPIC.Entity = null;
						previousValue.TRAININGHISTORies.Remove(this);
					}
					this._TOPIC.Entity = value;
					if ((value != null))
					{
						value.TRAININGHISTORies.Add(this);
						this._TOPICID = value.TOPICID;
					}
					else
					{
						this._TOPICID = default(string);
					}
					this.SendPropertyChanged("TOPIC");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRAINING_TRAININGHISTORY", Storage="_TRAINING", ThisKey="TRAININGID", OtherKey="TRAININGID", IsForeignKey=true)]
		public TRAINING TRAINING
		{
			get
			{
				return this._TRAINING.Entity;
			}
			set
			{
				TRAINING previousValue = this._TRAINING.Entity;
				if (((previousValue != value) 
							|| (this._TRAINING.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TRAINING.Entity = null;
						previousValue.TRAININGHISTORies.Remove(this);
					}
					this._TRAINING.Entity = value;
					if ((value != null))
					{
						value.TRAININGHISTORies.Add(this);
						this._TRAININGID = value.TRAININGID;
					}
					else
					{
						this._TRAININGID = default(string);
					}
					this.SendPropertyChanged("TRAINING");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CLASSES")]
	public partial class CLASS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CLASSID;
		
		private string _CLASSNAME;
		
		private string _GRADEID;
		
		private int _QUANTITY;
		
		private EntitySet<STUDENT> _STUDENTs;
		
		private EntitySet<TEACHER> _TEACHERs;
		
		private EntityRef<GRADE> _GRADE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCLASSIDChanging(string value);
    partial void OnCLASSIDChanged();
    partial void OnCLASSNAMEChanging(string value);
    partial void OnCLASSNAMEChanged();
    partial void OnGRADEIDChanging(string value);
    partial void OnGRADEIDChanged();
    partial void OnQUANTITYChanging(int value);
    partial void OnQUANTITYChanged();
    #endregion
		
		public CLASS()
		{
			this._STUDENTs = new EntitySet<STUDENT>(new Action<STUDENT>(this.attach_STUDENTs), new Action<STUDENT>(this.detach_STUDENTs));
			this._TEACHERs = new EntitySet<TEACHER>(new Action<TEACHER>(this.attach_TEACHERs), new Action<TEACHER>(this.detach_TEACHERs));
			this._GRADE = default(EntityRef<GRADE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLASSID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CLASSID
		{
			get
			{
				return this._CLASSID;
			}
			set
			{
				if ((this._CLASSID != value))
				{
					this.OnCLASSIDChanging(value);
					this.SendPropertyChanging();
					this._CLASSID = value;
					this.SendPropertyChanged("CLASSID");
					this.OnCLASSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLASSNAME", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CLASSNAME
		{
			get
			{
				return this._CLASSNAME;
			}
			set
			{
				if ((this._CLASSNAME != value))
				{
					this.OnCLASSNAMEChanging(value);
					this.SendPropertyChanging();
					this._CLASSNAME = value;
					this.SendPropertyChanged("CLASSNAME");
					this.OnCLASSNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GRADEID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string GRADEID
		{
			get
			{
				return this._GRADEID;
			}
			set
			{
				if ((this._GRADEID != value))
				{
					if (this._GRADE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGRADEIDChanging(value);
					this.SendPropertyChanging();
					this._GRADEID = value;
					this.SendPropertyChanged("GRADEID");
					this.OnGRADEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUANTITY", DbType="Int NOT NULL")]
		public int QUANTITY
		{
			get
			{
				return this._QUANTITY;
			}
			set
			{
				if ((this._QUANTITY != value))
				{
					this.OnQUANTITYChanging(value);
					this.SendPropertyChanging();
					this._QUANTITY = value;
					this.SendPropertyChanged("QUANTITY");
					this.OnQUANTITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_STUDENT", Storage="_STUDENTs", ThisKey="CLASSID", OtherKey="CLASSID")]
		public EntitySet<STUDENT> STUDENTs
		{
			get
			{
				return this._STUDENTs;
			}
			set
			{
				this._STUDENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_TEACHER", Storage="_TEACHERs", ThisKey="CLASSID", OtherKey="CLASSID")]
		public EntitySet<TEACHER> TEACHERs
		{
			get
			{
				return this._TEACHERs;
			}
			set
			{
				this._TEACHERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRADE_CLASS", Storage="_GRADE", ThisKey="GRADEID", OtherKey="GRADEID", IsForeignKey=true)]
		public GRADE GRADE
		{
			get
			{
				return this._GRADE.Entity;
			}
			set
			{
				GRADE previousValue = this._GRADE.Entity;
				if (((previousValue != value) 
							|| (this._GRADE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GRADE.Entity = null;
						previousValue.CLASSes.Remove(this);
					}
					this._GRADE.Entity = value;
					if ((value != null))
					{
						value.CLASSes.Add(this);
						this._GRADEID = value.GRADEID;
					}
					else
					{
						this._GRADEID = default(string);
					}
					this.SendPropertyChanged("GRADE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STUDENTs(STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = this;
		}
		
		private void detach_STUDENTs(STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = null;
		}
		
		private void attach_TEACHERs(TEACHER entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = this;
		}
		
		private void detach_TEACHERs(TEACHER entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EXAM")]
	public partial class EXAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EXAMID;
		
		private string _SEMESTER;
		
		private int _YEAROFSEMESTER;
		
		private int _TYPEOFEXAM;
		
		private int _STATUSOFEXAM;
		
		private System.DateTime _DATEOFEXAM;
		
		private EntitySet<EXAM_DETAIL> _EXAM_DETAILs;
		
		private EntitySet<PERCENTAGEOFQUESTION> _PERCENTAGEOFQUESTIONs;
		
		private EntitySet<SCHEDULE> _SCHEDULEs;
		
		private EntityRef<SEMESTER> _SEMESTER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEXAMIDChanging(string value);
    partial void OnEXAMIDChanged();
    partial void OnSEMESTERChanging(string value);
    partial void OnSEMESTERChanged();
    partial void OnYEAROFSEMESTERChanging(int value);
    partial void OnYEAROFSEMESTERChanged();
    partial void OnTYPEOFEXAMChanging(int value);
    partial void OnTYPEOFEXAMChanged();
    partial void OnSTATUSOFEXAMChanging(int value);
    partial void OnSTATUSOFEXAMChanged();
    partial void OnDATEOFEXAMChanging(System.DateTime value);
    partial void OnDATEOFEXAMChanged();
    #endregion
		
		public EXAM()
		{
			this._EXAM_DETAILs = new EntitySet<EXAM_DETAIL>(new Action<EXAM_DETAIL>(this.attach_EXAM_DETAILs), new Action<EXAM_DETAIL>(this.detach_EXAM_DETAILs));
			this._PERCENTAGEOFQUESTIONs = new EntitySet<PERCENTAGEOFQUESTION>(new Action<PERCENTAGEOFQUESTION>(this.attach_PERCENTAGEOFQUESTIONs), new Action<PERCENTAGEOFQUESTION>(this.detach_PERCENTAGEOFQUESTIONs));
			this._SCHEDULEs = new EntitySet<SCHEDULE>(new Action<SCHEDULE>(this.attach_SCHEDULEs), new Action<SCHEDULE>(this.detach_SCHEDULEs));
			this._SEMESTER1 = default(EntityRef<SEMESTER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXAMID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EXAMID
		{
			get
			{
				return this._EXAMID;
			}
			set
			{
				if ((this._EXAMID != value))
				{
					this.OnEXAMIDChanging(value);
					this.SendPropertyChanging();
					this._EXAMID = value;
					this.SendPropertyChanged("EXAMID");
					this.OnEXAMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SEMESTER", DbType="VarChar(10)")]
		public string SEMESTER
		{
			get
			{
				return this._SEMESTER;
			}
			set
			{
				if ((this._SEMESTER != value))
				{
					if (this._SEMESTER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSEMESTERChanging(value);
					this.SendPropertyChanging();
					this._SEMESTER = value;
					this.SendPropertyChanged("SEMESTER");
					this.OnSEMESTERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YEAROFSEMESTER", DbType="Int NOT NULL")]
		public int YEAROFSEMESTER
		{
			get
			{
				return this._YEAROFSEMESTER;
			}
			set
			{
				if ((this._YEAROFSEMESTER != value))
				{
					this.OnYEAROFSEMESTERChanging(value);
					this.SendPropertyChanging();
					this._YEAROFSEMESTER = value;
					this.SendPropertyChanged("YEAROFSEMESTER");
					this.OnYEAROFSEMESTERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPEOFEXAM", DbType="Int NOT NULL")]
		public int TYPEOFEXAM
		{
			get
			{
				return this._TYPEOFEXAM;
			}
			set
			{
				if ((this._TYPEOFEXAM != value))
				{
					this.OnTYPEOFEXAMChanging(value);
					this.SendPropertyChanging();
					this._TYPEOFEXAM = value;
					this.SendPropertyChanged("TYPEOFEXAM");
					this.OnTYPEOFEXAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATUSOFEXAM", DbType="Int NOT NULL")]
		public int STATUSOFEXAM
		{
			get
			{
				return this._STATUSOFEXAM;
			}
			set
			{
				if ((this._STATUSOFEXAM != value))
				{
					this.OnSTATUSOFEXAMChanging(value);
					this.SendPropertyChanging();
					this._STATUSOFEXAM = value;
					this.SendPropertyChanged("STATUSOFEXAM");
					this.OnSTATUSOFEXAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEOFEXAM", DbType="Date NOT NULL")]
		public System.DateTime DATEOFEXAM
		{
			get
			{
				return this._DATEOFEXAM;
			}
			set
			{
				if ((this._DATEOFEXAM != value))
				{
					this.OnDATEOFEXAMChanging(value);
					this.SendPropertyChanging();
					this._DATEOFEXAM = value;
					this.SendPropertyChanged("DATEOFEXAM");
					this.OnDATEOFEXAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXAM_EXAM_DETAIL", Storage="_EXAM_DETAILs", ThisKey="EXAMID", OtherKey="EXAMID")]
		public EntitySet<EXAM_DETAIL> EXAM_DETAILs
		{
			get
			{
				return this._EXAM_DETAILs;
			}
			set
			{
				this._EXAM_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXAM_PERCENTAGEOFQUESTION", Storage="_PERCENTAGEOFQUESTIONs", ThisKey="EXAMID", OtherKey="EXAMID")]
		public EntitySet<PERCENTAGEOFQUESTION> PERCENTAGEOFQUESTIONs
		{
			get
			{
				return this._PERCENTAGEOFQUESTIONs;
			}
			set
			{
				this._PERCENTAGEOFQUESTIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXAM_SCHEDULE", Storage="_SCHEDULEs", ThisKey="EXAMID", OtherKey="EXAMID")]
		public EntitySet<SCHEDULE> SCHEDULEs
		{
			get
			{
				return this._SCHEDULEs;
			}
			set
			{
				this._SCHEDULEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SEMESTER_EXAM", Storage="_SEMESTER1", ThisKey="SEMESTER", OtherKey="SEMESTERID", IsForeignKey=true)]
		public SEMESTER SEMESTER1
		{
			get
			{
				return this._SEMESTER1.Entity;
			}
			set
			{
				SEMESTER previousValue = this._SEMESTER1.Entity;
				if (((previousValue != value) 
							|| (this._SEMESTER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SEMESTER1.Entity = null;
						previousValue.EXAMs.Remove(this);
					}
					this._SEMESTER1.Entity = value;
					if ((value != null))
					{
						value.EXAMs.Add(this);
						this._SEMESTER = value.SEMESTERID;
					}
					else
					{
						this._SEMESTER = default(string);
					}
					this.SendPropertyChanged("SEMESTER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EXAM_DETAILs(EXAM_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.EXAM = this;
		}
		
		private void detach_EXAM_DETAILs(EXAM_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.EXAM = null;
		}
		
		private void attach_PERCENTAGEOFQUESTIONs(PERCENTAGEOFQUESTION entity)
		{
			this.SendPropertyChanging();
			entity.EXAM = this;
		}
		
		private void detach_PERCENTAGEOFQUESTIONs(PERCENTAGEOFQUESTION entity)
		{
			this.SendPropertyChanging();
			entity.EXAM = null;
		}
		
		private void attach_SCHEDULEs(SCHEDULE entity)
		{
			this.SendPropertyChanging();
			entity.EXAM = this;
		}
		
		private void detach_SCHEDULEs(SCHEDULE entity)
		{
			this.SendPropertyChanging();
			entity.EXAM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EXAM_DETAILS")]
	public partial class EXAM_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EXAMID;
		
		private string _PERSONALID;
		
		private string _TOPICID;
		
		private EntityRef<EXAM> _EXAM;
		
		private EntityRef<TOPIC> _TOPIC;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEXAMIDChanging(string value);
    partial void OnEXAMIDChanged();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnTOPICIDChanging(string value);
    partial void OnTOPICIDChanged();
    #endregion
		
		public EXAM_DETAIL()
		{
			this._EXAM = default(EntityRef<EXAM>);
			this._TOPIC = default(EntityRef<TOPIC>);
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXAMID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EXAMID
		{
			get
			{
				return this._EXAMID;
			}
			set
			{
				if ((this._EXAMID != value))
				{
					if (this._EXAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEXAMIDChanging(value);
					this.SendPropertyChanging();
					this._EXAMID = value;
					this.SendPropertyChanged("EXAMID");
					this.OnEXAMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOPICID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TOPICID
		{
			get
			{
				return this._TOPICID;
			}
			set
			{
				if ((this._TOPICID != value))
				{
					if (this._TOPIC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTOPICIDChanging(value);
					this.SendPropertyChanging();
					this._TOPICID = value;
					this.SendPropertyChanged("TOPICID");
					this.OnTOPICIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXAM_EXAM_DETAIL", Storage="_EXAM", ThisKey="EXAMID", OtherKey="EXAMID", IsForeignKey=true)]
		public EXAM EXAM
		{
			get
			{
				return this._EXAM.Entity;
			}
			set
			{
				EXAM previousValue = this._EXAM.Entity;
				if (((previousValue != value) 
							|| (this._EXAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EXAM.Entity = null;
						previousValue.EXAM_DETAILs.Remove(this);
					}
					this._EXAM.Entity = value;
					if ((value != null))
					{
						value.EXAM_DETAILs.Add(this);
						this._EXAMID = value.EXAMID;
					}
					else
					{
						this._EXAMID = default(string);
					}
					this.SendPropertyChanged("EXAM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOPIC_EXAM_DETAIL", Storage="_TOPIC", ThisKey="TOPICID", OtherKey="TOPICID", IsForeignKey=true)]
		public TOPIC TOPIC
		{
			get
			{
				return this._TOPIC.Entity;
			}
			set
			{
				TOPIC previousValue = this._TOPIC.Entity;
				if (((previousValue != value) 
							|| (this._TOPIC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TOPIC.Entity = null;
						previousValue.EXAM_DETAILs.Remove(this);
					}
					this._TOPIC.Entity = value;
					if ((value != null))
					{
						value.EXAM_DETAILs.Add(this);
						this._TOPICID = value.TOPICID;
					}
					else
					{
						this._TOPICID = default(string);
					}
					this.SendPropertyChanged("TOPIC");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_EXAM_DETAIL", Storage="_USERACCOUNT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.EXAM_DETAILs.Remove(this);
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.EXAM_DETAILs.Add(this);
						this._PERSONALID = value.PERSONALID;
					}
					else
					{
						this._PERSONALID = default(string);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GRADE")]
	public partial class GRADE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GRADEID;
		
		private string _DISPLAYNAME;
		
		private EntitySet<CLASS> _CLASSes;
		
		private EntitySet<TOPIC> _TOPICs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGRADEIDChanging(string value);
    partial void OnGRADEIDChanged();
    partial void OnDISPLAYNAMEChanging(string value);
    partial void OnDISPLAYNAMEChanged();
    #endregion
		
		public GRADE()
		{
			this._CLASSes = new EntitySet<CLASS>(new Action<CLASS>(this.attach_CLASSes), new Action<CLASS>(this.detach_CLASSes));
			this._TOPICs = new EntitySet<TOPIC>(new Action<TOPIC>(this.attach_TOPICs), new Action<TOPIC>(this.detach_TOPICs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GRADEID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GRADEID
		{
			get
			{
				return this._GRADEID;
			}
			set
			{
				if ((this._GRADEID != value))
				{
					this.OnGRADEIDChanging(value);
					this.SendPropertyChanging();
					this._GRADEID = value;
					this.SendPropertyChanged("GRADEID");
					this.OnGRADEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISPLAYNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DISPLAYNAME
		{
			get
			{
				return this._DISPLAYNAME;
			}
			set
			{
				if ((this._DISPLAYNAME != value))
				{
					this.OnDISPLAYNAMEChanging(value);
					this.SendPropertyChanging();
					this._DISPLAYNAME = value;
					this.SendPropertyChanged("DISPLAYNAME");
					this.OnDISPLAYNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRADE_CLASS", Storage="_CLASSes", ThisKey="GRADEID", OtherKey="GRADEID")]
		public EntitySet<CLASS> CLASSes
		{
			get
			{
				return this._CLASSes;
			}
			set
			{
				this._CLASSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRADE_TOPIC", Storage="_TOPICs", ThisKey="GRADEID", OtherKey="GRADEID")]
		public EntitySet<TOPIC> TOPICs
		{
			get
			{
				return this._TOPICs;
			}
			set
			{
				this._TOPICs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CLASSes(CLASS entity)
		{
			this.SendPropertyChanging();
			entity.GRADE = this;
		}
		
		private void detach_CLASSes(CLASS entity)
		{
			this.SendPropertyChanging();
			entity.GRADE = null;
		}
		
		private void attach_TOPICs(TOPIC entity)
		{
			this.SendPropertyChanging();
			entity.GRADE = this;
		}
		
		private void detach_TOPICs(TOPIC entity)
		{
			this.SendPropertyChanging();
			entity.GRADE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PERCENTAGEOFQUESTION")]
	public partial class PERCENTAGEOFQUESTION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _QUESTIONID;
		
		private string _EXAMID;
		
		private int _TOTALCORRECT;
		
		private int _TOTALINCORRECT;
		
		private EntityRef<EXAM> _EXAM;
		
		private EntityRef<QUESTION> _QUESTION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQUESTIONIDChanging(string value);
    partial void OnQUESTIONIDChanged();
    partial void OnEXAMIDChanging(string value);
    partial void OnEXAMIDChanged();
    partial void OnTOTALCORRECTChanging(int value);
    partial void OnTOTALCORRECTChanged();
    partial void OnTOTALINCORRECTChanging(int value);
    partial void OnTOTALINCORRECTChanged();
    #endregion
		
		public PERCENTAGEOFQUESTION()
		{
			this._EXAM = default(EntityRef<EXAM>);
			this._QUESTION = default(EntityRef<QUESTION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUESTIONID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QUESTIONID
		{
			get
			{
				return this._QUESTIONID;
			}
			set
			{
				if ((this._QUESTIONID != value))
				{
					if (this._QUESTION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQUESTIONIDChanging(value);
					this.SendPropertyChanging();
					this._QUESTIONID = value;
					this.SendPropertyChanged("QUESTIONID");
					this.OnQUESTIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXAMID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EXAMID
		{
			get
			{
				return this._EXAMID;
			}
			set
			{
				if ((this._EXAMID != value))
				{
					if (this._EXAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEXAMIDChanging(value);
					this.SendPropertyChanging();
					this._EXAMID = value;
					this.SendPropertyChanged("EXAMID");
					this.OnEXAMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTALCORRECT", DbType="Int NOT NULL")]
		public int TOTALCORRECT
		{
			get
			{
				return this._TOTALCORRECT;
			}
			set
			{
				if ((this._TOTALCORRECT != value))
				{
					this.OnTOTALCORRECTChanging(value);
					this.SendPropertyChanging();
					this._TOTALCORRECT = value;
					this.SendPropertyChanged("TOTALCORRECT");
					this.OnTOTALCORRECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTALINCORRECT", DbType="Int NOT NULL")]
		public int TOTALINCORRECT
		{
			get
			{
				return this._TOTALINCORRECT;
			}
			set
			{
				if ((this._TOTALINCORRECT != value))
				{
					this.OnTOTALINCORRECTChanging(value);
					this.SendPropertyChanging();
					this._TOTALINCORRECT = value;
					this.SendPropertyChanged("TOTALINCORRECT");
					this.OnTOTALINCORRECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXAM_PERCENTAGEOFQUESTION", Storage="_EXAM", ThisKey="EXAMID", OtherKey="EXAMID", IsForeignKey=true)]
		public EXAM EXAM
		{
			get
			{
				return this._EXAM.Entity;
			}
			set
			{
				EXAM previousValue = this._EXAM.Entity;
				if (((previousValue != value) 
							|| (this._EXAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EXAM.Entity = null;
						previousValue.PERCENTAGEOFQUESTIONs.Remove(this);
					}
					this._EXAM.Entity = value;
					if ((value != null))
					{
						value.PERCENTAGEOFQUESTIONs.Add(this);
						this._EXAMID = value.EXAMID;
					}
					else
					{
						this._EXAMID = default(string);
					}
					this.SendPropertyChanged("EXAM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUESTION_PERCENTAGEOFQUESTION", Storage="_QUESTION", ThisKey="QUESTIONID", OtherKey="QUESTIONID", IsForeignKey=true)]
		public QUESTION QUESTION
		{
			get
			{
				return this._QUESTION.Entity;
			}
			set
			{
				QUESTION previousValue = this._QUESTION.Entity;
				if (((previousValue != value) 
							|| (this._QUESTION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QUESTION.Entity = null;
						previousValue.PERCENTAGEOFQUESTIONs.Remove(this);
					}
					this._QUESTION.Entity = value;
					if ((value != null))
					{
						value.PERCENTAGEOFQUESTIONs.Add(this);
						this._QUESTIONID = value.QUESTIONID;
					}
					else
					{
						this._QUESTIONID = default(string);
					}
					this.SendPropertyChanged("QUESTION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PERMISSION")]
	public partial class PERMISSION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PERMISSIONID;
		
		private string _PERMISSIONNAME;
		
		private EntitySet<USERACCOUNT> _USERACCOUNTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPERMISSIONIDChanging(int value);
    partial void OnPERMISSIONIDChanged();
    partial void OnPERMISSIONNAMEChanging(string value);
    partial void OnPERMISSIONNAMEChanged();
    #endregion
		
		public PERMISSION()
		{
			this._USERACCOUNTs = new EntitySet<USERACCOUNT>(new Action<USERACCOUNT>(this.attach_USERACCOUNTs), new Action<USERACCOUNT>(this.detach_USERACCOUNTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERMISSIONID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PERMISSIONID
		{
			get
			{
				return this._PERMISSIONID;
			}
			set
			{
				if ((this._PERMISSIONID != value))
				{
					this.OnPERMISSIONIDChanging(value);
					this.SendPropertyChanging();
					this._PERMISSIONID = value;
					this.SendPropertyChanged("PERMISSIONID");
					this.OnPERMISSIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERMISSIONNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PERMISSIONNAME
		{
			get
			{
				return this._PERMISSIONNAME;
			}
			set
			{
				if ((this._PERMISSIONNAME != value))
				{
					this.OnPERMISSIONNAMEChanging(value);
					this.SendPropertyChanging();
					this._PERMISSIONNAME = value;
					this.SendPropertyChanged("PERMISSIONNAME");
					this.OnPERMISSIONNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERMISSION_USERACCOUNT", Storage="_USERACCOUNTs", ThisKey="PERMISSIONID", OtherKey="USERLEVEL")]
		public EntitySet<USERACCOUNT> USERACCOUNTs
		{
			get
			{
				return this._USERACCOUNTs;
			}
			set
			{
				this._USERACCOUNTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERACCOUNTs(USERACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.PERMISSION = this;
		}
		
		private void detach_USERACCOUNTs(USERACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.PERMISSION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PROCESSES")]
	public partial class PROCESS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TESTID;
		
		private string _QUESTIONID;
		
		private string _CHOICE;
		
		private EntityRef<QUESTION> _QUESTION;
		
		private EntityRef<TEST> _TEST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTESTIDChanging(string value);
    partial void OnTESTIDChanged();
    partial void OnQUESTIONIDChanging(string value);
    partial void OnQUESTIONIDChanged();
    partial void OnCHOICEChanging(string value);
    partial void OnCHOICEChanged();
    #endregion
		
		public PROCESS()
		{
			this._QUESTION = default(EntityRef<QUESTION>);
			this._TEST = default(EntityRef<TEST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TESTID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TESTID
		{
			get
			{
				return this._TESTID;
			}
			set
			{
				if ((this._TESTID != value))
				{
					if (this._TEST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTESTIDChanging(value);
					this.SendPropertyChanging();
					this._TESTID = value;
					this.SendPropertyChanged("TESTID");
					this.OnTESTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUESTIONID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QUESTIONID
		{
			get
			{
				return this._QUESTIONID;
			}
			set
			{
				if ((this._QUESTIONID != value))
				{
					if (this._QUESTION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQUESTIONIDChanging(value);
					this.SendPropertyChanging();
					this._QUESTIONID = value;
					this.SendPropertyChanged("QUESTIONID");
					this.OnQUESTIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHOICE", DbType="VarChar(10)")]
		public string CHOICE
		{
			get
			{
				return this._CHOICE;
			}
			set
			{
				if ((this._CHOICE != value))
				{
					this.OnCHOICEChanging(value);
					this.SendPropertyChanging();
					this._CHOICE = value;
					this.SendPropertyChanged("CHOICE");
					this.OnCHOICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUESTION_PROCESS", Storage="_QUESTION", ThisKey="QUESTIONID", OtherKey="QUESTIONID", IsForeignKey=true)]
		public QUESTION QUESTION
		{
			get
			{
				return this._QUESTION.Entity;
			}
			set
			{
				QUESTION previousValue = this._QUESTION.Entity;
				if (((previousValue != value) 
							|| (this._QUESTION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QUESTION.Entity = null;
						previousValue.PROCESSes.Remove(this);
					}
					this._QUESTION.Entity = value;
					if ((value != null))
					{
						value.PROCESSes.Add(this);
						this._QUESTIONID = value.QUESTIONID;
					}
					else
					{
						this._QUESTIONID = default(string);
					}
					this.SendPropertyChanged("QUESTION");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEST_PROCESS", Storage="_TEST", ThisKey="TESTID", OtherKey="TESTID", IsForeignKey=true)]
		public TEST TEST
		{
			get
			{
				return this._TEST.Entity;
			}
			set
			{
				TEST previousValue = this._TEST.Entity;
				if (((previousValue != value) 
							|| (this._TEST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEST.Entity = null;
						previousValue.PROCESSes.Remove(this);
					}
					this._TEST.Entity = value;
					if ((value != null))
					{
						value.PROCESSes.Add(this);
						this._TESTID = value.TESTID;
					}
					else
					{
						this._TESTID = default(string);
					}
					this.SendPropertyChanged("TEST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QUESTION")]
	public partial class QUESTION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _QUESTIONID;
		
		private string _GRADEID;
		
		private string _SUBJECTID;
		
		private string _CONTENTOFQUESTION;
		
		private string _A;
		
		private string _B;
		
		private string _C;
		
		private string _D;
		
		private string _E;
		
		private string _F;
		
		private string _CORRECTANSWER;
		
		private string _HINT;
		
		private int _DIFFICULT;
		
		private int _ISPRO;
		
		private EntitySet<PERCENTAGEOFQUESTION> _PERCENTAGEOFQUESTIONs;
		
		private EntitySet<PROCESS> _PROCESSes;
		
		private EntitySet<QUESTIONSSTORAGE> _QUESTIONSSTORAGEs;
		
		private EntitySet<STATISTIC> _STATISTICs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQUESTIONIDChanging(string value);
    partial void OnQUESTIONIDChanged();
    partial void OnGRADEIDChanging(string value);
    partial void OnGRADEIDChanged();
    partial void OnSUBJECTIDChanging(string value);
    partial void OnSUBJECTIDChanged();
    partial void OnCONTENTOFQUESTIONChanging(string value);
    partial void OnCONTENTOFQUESTIONChanged();
    partial void OnAChanging(string value);
    partial void OnAChanged();
    partial void OnBChanging(string value);
    partial void OnBChanged();
    partial void OnCChanging(string value);
    partial void OnCChanged();
    partial void OnDChanging(string value);
    partial void OnDChanged();
    partial void OnEChanging(string value);
    partial void OnEChanged();
    partial void OnFChanging(string value);
    partial void OnFChanged();
    partial void OnCORRECTANSWERChanging(string value);
    partial void OnCORRECTANSWERChanged();
    partial void OnHINTChanging(string value);
    partial void OnHINTChanged();
    partial void OnDIFFICULTChanging(int value);
    partial void OnDIFFICULTChanged();
    partial void OnISPROChanging(int value);
    partial void OnISPROChanged();
    #endregion
		
		public QUESTION()
		{
			this._PERCENTAGEOFQUESTIONs = new EntitySet<PERCENTAGEOFQUESTION>(new Action<PERCENTAGEOFQUESTION>(this.attach_PERCENTAGEOFQUESTIONs), new Action<PERCENTAGEOFQUESTION>(this.detach_PERCENTAGEOFQUESTIONs));
			this._PROCESSes = new EntitySet<PROCESS>(new Action<PROCESS>(this.attach_PROCESSes), new Action<PROCESS>(this.detach_PROCESSes));
			this._QUESTIONSSTORAGEs = new EntitySet<QUESTIONSSTORAGE>(new Action<QUESTIONSSTORAGE>(this.attach_QUESTIONSSTORAGEs), new Action<QUESTIONSSTORAGE>(this.detach_QUESTIONSSTORAGEs));
			this._STATISTICs = new EntitySet<STATISTIC>(new Action<STATISTIC>(this.attach_STATISTICs), new Action<STATISTIC>(this.detach_STATISTICs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUESTIONID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QUESTIONID
		{
			get
			{
				return this._QUESTIONID;
			}
			set
			{
				if ((this._QUESTIONID != value))
				{
					this.OnQUESTIONIDChanging(value);
					this.SendPropertyChanging();
					this._QUESTIONID = value;
					this.SendPropertyChanged("QUESTIONID");
					this.OnQUESTIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GRADEID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string GRADEID
		{
			get
			{
				return this._GRADEID;
			}
			set
			{
				if ((this._GRADEID != value))
				{
					this.OnGRADEIDChanging(value);
					this.SendPropertyChanging();
					this._GRADEID = value;
					this.SendPropertyChanged("GRADEID");
					this.OnGRADEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUBJECTID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SUBJECTID
		{
			get
			{
				return this._SUBJECTID;
			}
			set
			{
				if ((this._SUBJECTID != value))
				{
					this.OnSUBJECTIDChanging(value);
					this.SendPropertyChanging();
					this._SUBJECTID = value;
					this.SendPropertyChanged("SUBJECTID");
					this.OnSUBJECTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONTENTOFQUESTION", DbType="NVarChar(3600) NOT NULL", CanBeNull=false)]
		public string CONTENTOFQUESTION
		{
			get
			{
				return this._CONTENTOFQUESTION;
			}
			set
			{
				if ((this._CONTENTOFQUESTION != value))
				{
					this.OnCONTENTOFQUESTIONChanging(value);
					this.SendPropertyChanging();
					this._CONTENTOFQUESTION = value;
					this.SendPropertyChanged("CONTENTOFQUESTION");
					this.OnCONTENTOFQUESTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					this.OnAChanging(value);
					this.SendPropertyChanging();
					this._A = value;
					this.SendPropertyChanged("A");
					this.OnAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string B
		{
			get
			{
				return this._B;
			}
			set
			{
				if ((this._B != value))
				{
					this.OnBChanging(value);
					this.SendPropertyChanging();
					this._B = value;
					this.SendPropertyChanged("B");
					this.OnBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string C
		{
			get
			{
				return this._C;
			}
			set
			{
				if ((this._C != value))
				{
					this.OnCChanging(value);
					this.SendPropertyChanging();
					this._C = value;
					this.SendPropertyChanged("C");
					this.OnCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string D
		{
			get
			{
				return this._D;
			}
			set
			{
				if ((this._D != value))
				{
					this.OnDChanging(value);
					this.SendPropertyChanging();
					this._D = value;
					this.SendPropertyChanged("D");
					this.OnDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string E
		{
			get
			{
				return this._E;
			}
			set
			{
				if ((this._E != value))
				{
					this.OnEChanging(value);
					this.SendPropertyChanging();
					this._E = value;
					this.SendPropertyChanged("E");
					this.OnEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string F
		{
			get
			{
				return this._F;
			}
			set
			{
				if ((this._F != value))
				{
					this.OnFChanging(value);
					this.SendPropertyChanging();
					this._F = value;
					this.SendPropertyChanged("F");
					this.OnFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CORRECTANSWER", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string CORRECTANSWER
		{
			get
			{
				return this._CORRECTANSWER;
			}
			set
			{
				if ((this._CORRECTANSWER != value))
				{
					this.OnCORRECTANSWERChanging(value);
					this.SendPropertyChanging();
					this._CORRECTANSWER = value;
					this.SendPropertyChanged("CORRECTANSWER");
					this.OnCORRECTANSWERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HINT", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string HINT
		{
			get
			{
				return this._HINT;
			}
			set
			{
				if ((this._HINT != value))
				{
					this.OnHINTChanging(value);
					this.SendPropertyChanging();
					this._HINT = value;
					this.SendPropertyChanged("HINT");
					this.OnHINTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIFFICULT", DbType="Int NOT NULL")]
		public int DIFFICULT
		{
			get
			{
				return this._DIFFICULT;
			}
			set
			{
				if ((this._DIFFICULT != value))
				{
					this.OnDIFFICULTChanging(value);
					this.SendPropertyChanging();
					this._DIFFICULT = value;
					this.SendPropertyChanged("DIFFICULT");
					this.OnDIFFICULTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISPRO", DbType="Int NOT NULL")]
		public int ISPRO
		{
			get
			{
				return this._ISPRO;
			}
			set
			{
				if ((this._ISPRO != value))
				{
					this.OnISPROChanging(value);
					this.SendPropertyChanging();
					this._ISPRO = value;
					this.SendPropertyChanged("ISPRO");
					this.OnISPROChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUESTION_PERCENTAGEOFQUESTION", Storage="_PERCENTAGEOFQUESTIONs", ThisKey="QUESTIONID", OtherKey="QUESTIONID")]
		public EntitySet<PERCENTAGEOFQUESTION> PERCENTAGEOFQUESTIONs
		{
			get
			{
				return this._PERCENTAGEOFQUESTIONs;
			}
			set
			{
				this._PERCENTAGEOFQUESTIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUESTION_PROCESS", Storage="_PROCESSes", ThisKey="QUESTIONID", OtherKey="QUESTIONID")]
		public EntitySet<PROCESS> PROCESSes
		{
			get
			{
				return this._PROCESSes;
			}
			set
			{
				this._PROCESSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUESTION_QUESTIONSSTORAGE", Storage="_QUESTIONSSTORAGEs", ThisKey="QUESTIONID", OtherKey="QUESTIONID")]
		public EntitySet<QUESTIONSSTORAGE> QUESTIONSSTORAGEs
		{
			get
			{
				return this._QUESTIONSSTORAGEs;
			}
			set
			{
				this._QUESTIONSSTORAGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUESTION_STATISTIC", Storage="_STATISTICs", ThisKey="QUESTIONID", OtherKey="QUESTIONID")]
		public EntitySet<STATISTIC> STATISTICs
		{
			get
			{
				return this._STATISTICs;
			}
			set
			{
				this._STATISTICs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PERCENTAGEOFQUESTIONs(PERCENTAGEOFQUESTION entity)
		{
			this.SendPropertyChanging();
			entity.QUESTION = this;
		}
		
		private void detach_PERCENTAGEOFQUESTIONs(PERCENTAGEOFQUESTION entity)
		{
			this.SendPropertyChanging();
			entity.QUESTION = null;
		}
		
		private void attach_PROCESSes(PROCESS entity)
		{
			this.SendPropertyChanging();
			entity.QUESTION = this;
		}
		
		private void detach_PROCESSes(PROCESS entity)
		{
			this.SendPropertyChanging();
			entity.QUESTION = null;
		}
		
		private void attach_QUESTIONSSTORAGEs(QUESTIONSSTORAGE entity)
		{
			this.SendPropertyChanging();
			entity.QUESTION = this;
		}
		
		private void detach_QUESTIONSSTORAGEs(QUESTIONSSTORAGE entity)
		{
			this.SendPropertyChanging();
			entity.QUESTION = null;
		}
		
		private void attach_STATISTICs(STATISTIC entity)
		{
			this.SendPropertyChanging();
			entity.QUESTION = this;
		}
		
		private void detach_STATISTICs(STATISTIC entity)
		{
			this.SendPropertyChanging();
			entity.QUESTION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QUESTIONSSTORAGE")]
	public partial class QUESTIONSSTORAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PERSONALID;
		
		private string _QUESTIONID;
		
		private int _APPROVALSTATUS;
		
		private EntityRef<QUESTION> _QUESTION;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnQUESTIONIDChanging(string value);
    partial void OnQUESTIONIDChanged();
    partial void OnAPPROVALSTATUSChanging(int value);
    partial void OnAPPROVALSTATUSChanged();
    #endregion
		
		public QUESTIONSSTORAGE()
		{
			this._QUESTION = default(EntityRef<QUESTION>);
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUESTIONID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QUESTIONID
		{
			get
			{
				return this._QUESTIONID;
			}
			set
			{
				if ((this._QUESTIONID != value))
				{
					if (this._QUESTION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQUESTIONIDChanging(value);
					this.SendPropertyChanging();
					this._QUESTIONID = value;
					this.SendPropertyChanged("QUESTIONID");
					this.OnQUESTIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APPROVALSTATUS", DbType="Int NOT NULL")]
		public int APPROVALSTATUS
		{
			get
			{
				return this._APPROVALSTATUS;
			}
			set
			{
				if ((this._APPROVALSTATUS != value))
				{
					this.OnAPPROVALSTATUSChanging(value);
					this.SendPropertyChanging();
					this._APPROVALSTATUS = value;
					this.SendPropertyChanged("APPROVALSTATUS");
					this.OnAPPROVALSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUESTION_QUESTIONSSTORAGE", Storage="_QUESTION", ThisKey="QUESTIONID", OtherKey="QUESTIONID", IsForeignKey=true)]
		public QUESTION QUESTION
		{
			get
			{
				return this._QUESTION.Entity;
			}
			set
			{
				QUESTION previousValue = this._QUESTION.Entity;
				if (((previousValue != value) 
							|| (this._QUESTION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QUESTION.Entity = null;
						previousValue.QUESTIONSSTORAGEs.Remove(this);
					}
					this._QUESTION.Entity = value;
					if ((value != null))
					{
						value.QUESTIONSSTORAGEs.Add(this);
						this._QUESTIONID = value.QUESTIONID;
					}
					else
					{
						this._QUESTIONID = default(string);
					}
					this.SendPropertyChanged("QUESTION");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_QUESTIONSSTORAGE", Storage="_USERACCOUNT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.QUESTIONSSTORAGEs.Remove(this);
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.QUESTIONSSTORAGEs.Add(this);
						this._PERSONALID = value.PERSONALID;
					}
					else
					{
						this._PERSONALID = default(string);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RESULTOFTEST")]
	public partial class RESULTOFTEST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TESTID;
		
		private int _TOTALCORRECT;
		
		private int _TOTALINCORRECT;
		
		private double _SCORE;
		
		private string _PASSSTATUS;
		
		private EntityRef<TEST> _TEST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTESTIDChanging(string value);
    partial void OnTESTIDChanged();
    partial void OnTOTALCORRECTChanging(int value);
    partial void OnTOTALCORRECTChanged();
    partial void OnTOTALINCORRECTChanging(int value);
    partial void OnTOTALINCORRECTChanged();
    partial void OnSCOREChanging(double value);
    partial void OnSCOREChanged();
    partial void OnPASSSTATUSChanging(string value);
    partial void OnPASSSTATUSChanged();
    #endregion
		
		public RESULTOFTEST()
		{
			this._TEST = default(EntityRef<TEST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TESTID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TESTID
		{
			get
			{
				return this._TESTID;
			}
			set
			{
				if ((this._TESTID != value))
				{
					if (this._TEST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTESTIDChanging(value);
					this.SendPropertyChanging();
					this._TESTID = value;
					this.SendPropertyChanged("TESTID");
					this.OnTESTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTALCORRECT", DbType="Int NOT NULL")]
		public int TOTALCORRECT
		{
			get
			{
				return this._TOTALCORRECT;
			}
			set
			{
				if ((this._TOTALCORRECT != value))
				{
					this.OnTOTALCORRECTChanging(value);
					this.SendPropertyChanging();
					this._TOTALCORRECT = value;
					this.SendPropertyChanged("TOTALCORRECT");
					this.OnTOTALCORRECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTALINCORRECT", DbType="Int NOT NULL")]
		public int TOTALINCORRECT
		{
			get
			{
				return this._TOTALINCORRECT;
			}
			set
			{
				if ((this._TOTALINCORRECT != value))
				{
					this.OnTOTALINCORRECTChanging(value);
					this.SendPropertyChanging();
					this._TOTALINCORRECT = value;
					this.SendPropertyChanged("TOTALINCORRECT");
					this.OnTOTALINCORRECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCORE", DbType="Float NOT NULL")]
		public double SCORE
		{
			get
			{
				return this._SCORE;
			}
			set
			{
				if ((this._SCORE != value))
				{
					this.OnSCOREChanging(value);
					this.SendPropertyChanging();
					this._SCORE = value;
					this.SendPropertyChanged("SCORE");
					this.OnSCOREChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSSTATUS", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PASSSTATUS
		{
			get
			{
				return this._PASSSTATUS;
			}
			set
			{
				if ((this._PASSSTATUS != value))
				{
					this.OnPASSSTATUSChanging(value);
					this.SendPropertyChanging();
					this._PASSSTATUS = value;
					this.SendPropertyChanged("PASSSTATUS");
					this.OnPASSSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEST_RESULTOFTEST", Storage="_TEST", ThisKey="TESTID", OtherKey="TESTID", IsForeignKey=true)]
		public TEST TEST
		{
			get
			{
				return this._TEST.Entity;
			}
			set
			{
				TEST previousValue = this._TEST.Entity;
				if (((previousValue != value) 
							|| (this._TEST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEST.Entity = null;
						previousValue.RESULTOFTEST = null;
					}
					this._TEST.Entity = value;
					if ((value != null))
					{
						value.RESULTOFTEST = this;
						this._TESTID = value.TESTID;
					}
					else
					{
						this._TESTID = default(string);
					}
					this.SendPropertyChanged("TEST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SCHEDULE")]
	public partial class SCHEDULE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PERSONALID;
		
		private string _EXAMID;
		
		private string _SUBJECTID;
		
		private System.DateTime _DATEOFTEST;
		
		private string _NAMEOFSUBJECT;
		
		private string _PLACE;
		
		private EntityRef<EXAM> _EXAM;
		
		private EntityRef<SUBJECT> _SUBJECT;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnEXAMIDChanging(string value);
    partial void OnEXAMIDChanged();
    partial void OnSUBJECTIDChanging(string value);
    partial void OnSUBJECTIDChanged();
    partial void OnDATEOFTESTChanging(System.DateTime value);
    partial void OnDATEOFTESTChanged();
    partial void OnNAMEOFSUBJECTChanging(string value);
    partial void OnNAMEOFSUBJECTChanged();
    partial void OnPLACEChanging(string value);
    partial void OnPLACEChanged();
    #endregion
		
		public SCHEDULE()
		{
			this._EXAM = default(EntityRef<EXAM>);
			this._SUBJECT = default(EntityRef<SUBJECT>);
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXAMID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EXAMID
		{
			get
			{
				return this._EXAMID;
			}
			set
			{
				if ((this._EXAMID != value))
				{
					if (this._EXAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEXAMIDChanging(value);
					this.SendPropertyChanging();
					this._EXAMID = value;
					this.SendPropertyChanged("EXAMID");
					this.OnEXAMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUBJECTID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SUBJECTID
		{
			get
			{
				return this._SUBJECTID;
			}
			set
			{
				if ((this._SUBJECTID != value))
				{
					if (this._SUBJECT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSUBJECTIDChanging(value);
					this.SendPropertyChanging();
					this._SUBJECTID = value;
					this.SendPropertyChanged("SUBJECTID");
					this.OnSUBJECTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEOFTEST", DbType="Date NOT NULL")]
		public System.DateTime DATEOFTEST
		{
			get
			{
				return this._DATEOFTEST;
			}
			set
			{
				if ((this._DATEOFTEST != value))
				{
					this.OnDATEOFTESTChanging(value);
					this.SendPropertyChanging();
					this._DATEOFTEST = value;
					this.SendPropertyChanged("DATEOFTEST");
					this.OnDATEOFTESTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAMEOFSUBJECT", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NAMEOFSUBJECT
		{
			get
			{
				return this._NAMEOFSUBJECT;
			}
			set
			{
				if ((this._NAMEOFSUBJECT != value))
				{
					this.OnNAMEOFSUBJECTChanging(value);
					this.SendPropertyChanging();
					this._NAMEOFSUBJECT = value;
					this.SendPropertyChanged("NAMEOFSUBJECT");
					this.OnNAMEOFSUBJECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLACE", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PLACE
		{
			get
			{
				return this._PLACE;
			}
			set
			{
				if ((this._PLACE != value))
				{
					this.OnPLACEChanging(value);
					this.SendPropertyChanging();
					this._PLACE = value;
					this.SendPropertyChanged("PLACE");
					this.OnPLACEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXAM_SCHEDULE", Storage="_EXAM", ThisKey="EXAMID", OtherKey="EXAMID", IsForeignKey=true)]
		public EXAM EXAM
		{
			get
			{
				return this._EXAM.Entity;
			}
			set
			{
				EXAM previousValue = this._EXAM.Entity;
				if (((previousValue != value) 
							|| (this._EXAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EXAM.Entity = null;
						previousValue.SCHEDULEs.Remove(this);
					}
					this._EXAM.Entity = value;
					if ((value != null))
					{
						value.SCHEDULEs.Add(this);
						this._EXAMID = value.EXAMID;
					}
					else
					{
						this._EXAMID = default(string);
					}
					this.SendPropertyChanged("EXAM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUBJECT_SCHEDULE", Storage="_SUBJECT", ThisKey="SUBJECTID", OtherKey="SUBJECTID", IsForeignKey=true)]
		public SUBJECT SUBJECT
		{
			get
			{
				return this._SUBJECT.Entity;
			}
			set
			{
				SUBJECT previousValue = this._SUBJECT.Entity;
				if (((previousValue != value) 
							|| (this._SUBJECT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SUBJECT.Entity = null;
						previousValue.SCHEDULEs.Remove(this);
					}
					this._SUBJECT.Entity = value;
					if ((value != null))
					{
						value.SCHEDULEs.Add(this);
						this._SUBJECTID = value.SUBJECTID;
					}
					else
					{
						this._SUBJECTID = default(string);
					}
					this.SendPropertyChanged("SUBJECT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_SCHEDULE", Storage="_USERACCOUNT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.SCHEDULEs.Remove(this);
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.SCHEDULEs.Add(this);
						this._PERSONALID = value.PERSONALID;
					}
					else
					{
						this._PERSONALID = default(string);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SEMESTER")]
	public partial class SEMESTER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SEMESTERID;
		
		private string _NAME;
		
		private EntitySet<EXAM> _EXAMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSEMESTERIDChanging(string value);
    partial void OnSEMESTERIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public SEMESTER()
		{
			this._EXAMs = new EntitySet<EXAM>(new Action<EXAM>(this.attach_EXAMs), new Action<EXAM>(this.detach_EXAMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SEMESTERID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SEMESTERID
		{
			get
			{
				return this._SEMESTERID;
			}
			set
			{
				if ((this._SEMESTERID != value))
				{
					this.OnSEMESTERIDChanging(value);
					this.SendPropertyChanging();
					this._SEMESTERID = value;
					this.SendPropertyChanged("SEMESTERID");
					this.OnSEMESTERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SEMESTER_EXAM", Storage="_EXAMs", ThisKey="SEMESTERID", OtherKey="SEMESTER")]
		public EntitySet<EXAM> EXAMs
		{
			get
			{
				return this._EXAMs;
			}
			set
			{
				this._EXAMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EXAMs(EXAM entity)
		{
			this.SendPropertyChanging();
			entity.SEMESTER1 = this;
		}
		
		private void detach_EXAMs(EXAM entity)
		{
			this.SendPropertyChanging();
			entity.SEMESTER1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATISTIC")]
	public partial class STATISTIC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TESTID;
		
		private string _QUESTIONID;
		
		private System.Nullable<int> _ISCORRECT;
		
		private EntityRef<QUESTION> _QUESTION;
		
		private EntityRef<TEST> _TEST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTESTIDChanging(string value);
    partial void OnTESTIDChanged();
    partial void OnQUESTIONIDChanging(string value);
    partial void OnQUESTIONIDChanged();
    partial void OnISCORRECTChanging(System.Nullable<int> value);
    partial void OnISCORRECTChanged();
    #endregion
		
		public STATISTIC()
		{
			this._QUESTION = default(EntityRef<QUESTION>);
			this._TEST = default(EntityRef<TEST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TESTID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TESTID
		{
			get
			{
				return this._TESTID;
			}
			set
			{
				if ((this._TESTID != value))
				{
					if (this._TEST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTESTIDChanging(value);
					this.SendPropertyChanging();
					this._TESTID = value;
					this.SendPropertyChanged("TESTID");
					this.OnTESTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUESTIONID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QUESTIONID
		{
			get
			{
				return this._QUESTIONID;
			}
			set
			{
				if ((this._QUESTIONID != value))
				{
					if (this._QUESTION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQUESTIONIDChanging(value);
					this.SendPropertyChanging();
					this._QUESTIONID = value;
					this.SendPropertyChanged("QUESTIONID");
					this.OnQUESTIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISCORRECT", DbType="Int")]
		public System.Nullable<int> ISCORRECT
		{
			get
			{
				return this._ISCORRECT;
			}
			set
			{
				if ((this._ISCORRECT != value))
				{
					this.OnISCORRECTChanging(value);
					this.SendPropertyChanging();
					this._ISCORRECT = value;
					this.SendPropertyChanged("ISCORRECT");
					this.OnISCORRECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QUESTION_STATISTIC", Storage="_QUESTION", ThisKey="QUESTIONID", OtherKey="QUESTIONID", IsForeignKey=true)]
		public QUESTION QUESTION
		{
			get
			{
				return this._QUESTION.Entity;
			}
			set
			{
				QUESTION previousValue = this._QUESTION.Entity;
				if (((previousValue != value) 
							|| (this._QUESTION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QUESTION.Entity = null;
						previousValue.STATISTICs.Remove(this);
					}
					this._QUESTION.Entity = value;
					if ((value != null))
					{
						value.STATISTICs.Add(this);
						this._QUESTIONID = value.QUESTIONID;
					}
					else
					{
						this._QUESTIONID = default(string);
					}
					this.SendPropertyChanged("QUESTION");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEST_STATISTIC", Storage="_TEST", ThisKey="TESTID", OtherKey="TESTID", IsForeignKey=true)]
		public TEST TEST
		{
			get
			{
				return this._TEST.Entity;
			}
			set
			{
				TEST previousValue = this._TEST.Entity;
				if (((previousValue != value) 
							|| (this._TEST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEST.Entity = null;
						previousValue.STATISTICs.Remove(this);
					}
					this._TEST.Entity = value;
					if ((value != null))
					{
						value.STATISTICs.Add(this);
						this._TESTID = value.TESTID;
					}
					else
					{
						this._TESTID = default(string);
					}
					this.SendPropertyChanged("TEST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STUDENTS")]
	public partial class STUDENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PERSONALID;
		
		private string _FULLNAME;
		
		private string _GENDER;
		
		private string _CLASSID;
		
		private System.DateTime _DATEOFBIRTH;
		
		private int _ISPRO;
		
		private string _ADR;
		
		private EntityRef<CLASS> _CLASS;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnFULLNAMEChanging(string value);
    partial void OnFULLNAMEChanged();
    partial void OnGENDERChanging(string value);
    partial void OnGENDERChanged();
    partial void OnCLASSIDChanging(string value);
    partial void OnCLASSIDChanged();
    partial void OnDATEOFBIRTHChanging(System.DateTime value);
    partial void OnDATEOFBIRTHChanged();
    partial void OnISPROChanging(int value);
    partial void OnISPROChanged();
    partial void OnADRChanging(string value);
    partial void OnADRChanged();
    #endregion
		
		public STUDENT()
		{
			this._CLASS = default(EntityRef<CLASS>);
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FULLNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FULLNAME
		{
			get
			{
				return this._FULLNAME;
			}
			set
			{
				if ((this._FULLNAME != value))
				{
					this.OnFULLNAMEChanging(value);
					this.SendPropertyChanging();
					this._FULLNAME = value;
					this.SendPropertyChanged("FULLNAME");
					this.OnFULLNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string GENDER
		{
			get
			{
				return this._GENDER;
			}
			set
			{
				if ((this._GENDER != value))
				{
					this.OnGENDERChanging(value);
					this.SendPropertyChanging();
					this._GENDER = value;
					this.SendPropertyChanged("GENDER");
					this.OnGENDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLASSID", DbType="VarChar(10)")]
		public string CLASSID
		{
			get
			{
				return this._CLASSID;
			}
			set
			{
				if ((this._CLASSID != value))
				{
					if (this._CLASS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCLASSIDChanging(value);
					this.SendPropertyChanging();
					this._CLASSID = value;
					this.SendPropertyChanged("CLASSID");
					this.OnCLASSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEOFBIRTH", DbType="Date NOT NULL")]
		public System.DateTime DATEOFBIRTH
		{
			get
			{
				return this._DATEOFBIRTH;
			}
			set
			{
				if ((this._DATEOFBIRTH != value))
				{
					this.OnDATEOFBIRTHChanging(value);
					this.SendPropertyChanging();
					this._DATEOFBIRTH = value;
					this.SendPropertyChanged("DATEOFBIRTH");
					this.OnDATEOFBIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISPRO", DbType="Int NOT NULL")]
		public int ISPRO
		{
			get
			{
				return this._ISPRO;
			}
			set
			{
				if ((this._ISPRO != value))
				{
					this.OnISPROChanging(value);
					this.SendPropertyChanging();
					this._ISPRO = value;
					this.SendPropertyChanged("ISPRO");
					this.OnISPROChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADR", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ADR
		{
			get
			{
				return this._ADR;
			}
			set
			{
				if ((this._ADR != value))
				{
					this.OnADRChanging(value);
					this.SendPropertyChanging();
					this._ADR = value;
					this.SendPropertyChanged("ADR");
					this.OnADRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_STUDENT", Storage="_CLASS", ThisKey="CLASSID", OtherKey="CLASSID", IsForeignKey=true)]
		public CLASS CLASS
		{
			get
			{
				return this._CLASS.Entity;
			}
			set
			{
				CLASS previousValue = this._CLASS.Entity;
				if (((previousValue != value) 
							|| (this._CLASS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLASS.Entity = null;
						previousValue.STUDENTs.Remove(this);
					}
					this._CLASS.Entity = value;
					if ((value != null))
					{
						value.STUDENTs.Add(this);
						this._CLASSID = value.CLASSID;
					}
					else
					{
						this._CLASSID = default(string);
					}
					this.SendPropertyChanged("CLASS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_STUDENT", Storage="_USERACCOUNT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.STUDENT = null;
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.STUDENT = this;
						this._PERSONALID = value.PERSONALID;
					}
					else
					{
						this._PERSONALID = default(string);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SUBJECTS")]
	public partial class SUBJECT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SUBJECTID;
		
		private string _SUBJECTNAME;
		
		private EntitySet<SCHEDULE> _SCHEDULEs;
		
		private EntitySet<TOPIC> _TOPICs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSUBJECTIDChanging(string value);
    partial void OnSUBJECTIDChanged();
    partial void OnSUBJECTNAMEChanging(string value);
    partial void OnSUBJECTNAMEChanged();
    #endregion
		
		public SUBJECT()
		{
			this._SCHEDULEs = new EntitySet<SCHEDULE>(new Action<SCHEDULE>(this.attach_SCHEDULEs), new Action<SCHEDULE>(this.detach_SCHEDULEs));
			this._TOPICs = new EntitySet<TOPIC>(new Action<TOPIC>(this.attach_TOPICs), new Action<TOPIC>(this.detach_TOPICs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUBJECTID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SUBJECTID
		{
			get
			{
				return this._SUBJECTID;
			}
			set
			{
				if ((this._SUBJECTID != value))
				{
					this.OnSUBJECTIDChanging(value);
					this.SendPropertyChanging();
					this._SUBJECTID = value;
					this.SendPropertyChanged("SUBJECTID");
					this.OnSUBJECTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUBJECTNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SUBJECTNAME
		{
			get
			{
				return this._SUBJECTNAME;
			}
			set
			{
				if ((this._SUBJECTNAME != value))
				{
					this.OnSUBJECTNAMEChanging(value);
					this.SendPropertyChanging();
					this._SUBJECTNAME = value;
					this.SendPropertyChanged("SUBJECTNAME");
					this.OnSUBJECTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUBJECT_SCHEDULE", Storage="_SCHEDULEs", ThisKey="SUBJECTID", OtherKey="SUBJECTID")]
		public EntitySet<SCHEDULE> SCHEDULEs
		{
			get
			{
				return this._SCHEDULEs;
			}
			set
			{
				this._SCHEDULEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUBJECT_TOPIC", Storage="_TOPICs", ThisKey="SUBJECTID", OtherKey="SUBJECTID")]
		public EntitySet<TOPIC> TOPICs
		{
			get
			{
				return this._TOPICs;
			}
			set
			{
				this._TOPICs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SCHEDULEs(SCHEDULE entity)
		{
			this.SendPropertyChanging();
			entity.SUBJECT = this;
		}
		
		private void detach_SCHEDULEs(SCHEDULE entity)
		{
			this.SendPropertyChanging();
			entity.SUBJECT = null;
		}
		
		private void attach_TOPICs(TOPIC entity)
		{
			this.SendPropertyChanging();
			entity.SUBJECT = this;
		}
		
		private void detach_TOPICs(TOPIC entity)
		{
			this.SendPropertyChanging();
			entity.SUBJECT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TEACHERS")]
	public partial class TEACHER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PERSONALID;
		
		private string _FULLNAME;
		
		private string _GENDER;
		
		private string _CLASSID;
		
		private string _SUBJECTID;
		
		private System.DateTime _DATEOFBIRTH;
		
		private string _ADR;
		
		private EntityRef<CLASS> _CLASS;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnFULLNAMEChanging(string value);
    partial void OnFULLNAMEChanged();
    partial void OnGENDERChanging(string value);
    partial void OnGENDERChanged();
    partial void OnCLASSIDChanging(string value);
    partial void OnCLASSIDChanged();
    partial void OnSUBJECTIDChanging(string value);
    partial void OnSUBJECTIDChanged();
    partial void OnDATEOFBIRTHChanging(System.DateTime value);
    partial void OnDATEOFBIRTHChanged();
    partial void OnADRChanging(string value);
    partial void OnADRChanged();
    #endregion
		
		public TEACHER()
		{
			this._CLASS = default(EntityRef<CLASS>);
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FULLNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FULLNAME
		{
			get
			{
				return this._FULLNAME;
			}
			set
			{
				if ((this._FULLNAME != value))
				{
					this.OnFULLNAMEChanging(value);
					this.SendPropertyChanging();
					this._FULLNAME = value;
					this.SendPropertyChanged("FULLNAME");
					this.OnFULLNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string GENDER
		{
			get
			{
				return this._GENDER;
			}
			set
			{
				if ((this._GENDER != value))
				{
					this.OnGENDERChanging(value);
					this.SendPropertyChanging();
					this._GENDER = value;
					this.SendPropertyChanged("GENDER");
					this.OnGENDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CLASSID", DbType="VarChar(10)")]
		public string CLASSID
		{
			get
			{
				return this._CLASSID;
			}
			set
			{
				if ((this._CLASSID != value))
				{
					if (this._CLASS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCLASSIDChanging(value);
					this.SendPropertyChanging();
					this._CLASSID = value;
					this.SendPropertyChanged("CLASSID");
					this.OnCLASSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUBJECTID", DbType="VarChar(10)")]
		public string SUBJECTID
		{
			get
			{
				return this._SUBJECTID;
			}
			set
			{
				if ((this._SUBJECTID != value))
				{
					this.OnSUBJECTIDChanging(value);
					this.SendPropertyChanging();
					this._SUBJECTID = value;
					this.SendPropertyChanged("SUBJECTID");
					this.OnSUBJECTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEOFBIRTH", DbType="Date NOT NULL")]
		public System.DateTime DATEOFBIRTH
		{
			get
			{
				return this._DATEOFBIRTH;
			}
			set
			{
				if ((this._DATEOFBIRTH != value))
				{
					this.OnDATEOFBIRTHChanging(value);
					this.SendPropertyChanging();
					this._DATEOFBIRTH = value;
					this.SendPropertyChanged("DATEOFBIRTH");
					this.OnDATEOFBIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADR", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ADR
		{
			get
			{
				return this._ADR;
			}
			set
			{
				if ((this._ADR != value))
				{
					this.OnADRChanging(value);
					this.SendPropertyChanging();
					this._ADR = value;
					this.SendPropertyChanged("ADR");
					this.OnADRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_TEACHER", Storage="_CLASS", ThisKey="CLASSID", OtherKey="CLASSID", IsForeignKey=true)]
		public CLASS CLASS
		{
			get
			{
				return this._CLASS.Entity;
			}
			set
			{
				CLASS previousValue = this._CLASS.Entity;
				if (((previousValue != value) 
							|| (this._CLASS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLASS.Entity = null;
						previousValue.TEACHERs.Remove(this);
					}
					this._CLASS.Entity = value;
					if ((value != null))
					{
						value.TEACHERs.Add(this);
						this._CLASSID = value.CLASSID;
					}
					else
					{
						this._CLASSID = default(string);
					}
					this.SendPropertyChanged("CLASS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_TEACHER", Storage="_USERACCOUNT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.TEACHER = null;
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.TEACHER = this;
						this._PERSONALID = value.PERSONALID;
					}
					else
					{
						this._PERSONALID = default(string);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TESTS")]
	public partial class TEST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TESTID;
		
		private string _PERSONALID;
		
		private string _TOPICID;
		
		private int _COMPLETESTATUS;
		
		private System.DateTime _DATEOFTEST;
		
		private int _TIMELEFT;
		
		private EntitySet<PROCESS> _PROCESSes;
		
		private EntityRef<RESULTOFTEST> _RESULTOFTEST;
		
		private EntitySet<STATISTIC> _STATISTICs;
		
		private EntityRef<TOPIC> _TOPIC;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTESTIDChanging(string value);
    partial void OnTESTIDChanged();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnTOPICIDChanging(string value);
    partial void OnTOPICIDChanged();
    partial void OnCOMPLETESTATUSChanging(int value);
    partial void OnCOMPLETESTATUSChanged();
    partial void OnDATEOFTESTChanging(System.DateTime value);
    partial void OnDATEOFTESTChanged();
    partial void OnTIMELEFTChanging(int value);
    partial void OnTIMELEFTChanged();
    #endregion
		
		public TEST()
		{
			this._PROCESSes = new EntitySet<PROCESS>(new Action<PROCESS>(this.attach_PROCESSes), new Action<PROCESS>(this.detach_PROCESSes));
			this._RESULTOFTEST = default(EntityRef<RESULTOFTEST>);
			this._STATISTICs = new EntitySet<STATISTIC>(new Action<STATISTIC>(this.attach_STATISTICs), new Action<STATISTIC>(this.detach_STATISTICs));
			this._TOPIC = default(EntityRef<TOPIC>);
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TESTID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TESTID
		{
			get
			{
				return this._TESTID;
			}
			set
			{
				if ((this._TESTID != value))
				{
					this.OnTESTIDChanging(value);
					this.SendPropertyChanging();
					this._TESTID = value;
					this.SendPropertyChanged("TESTID");
					this.OnTESTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10)")]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOPICID", DbType="VarChar(10)")]
		public string TOPICID
		{
			get
			{
				return this._TOPICID;
			}
			set
			{
				if ((this._TOPICID != value))
				{
					if (this._TOPIC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTOPICIDChanging(value);
					this.SendPropertyChanging();
					this._TOPICID = value;
					this.SendPropertyChanged("TOPICID");
					this.OnTOPICIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COMPLETESTATUS", DbType="Int NOT NULL")]
		public int COMPLETESTATUS
		{
			get
			{
				return this._COMPLETESTATUS;
			}
			set
			{
				if ((this._COMPLETESTATUS != value))
				{
					this.OnCOMPLETESTATUSChanging(value);
					this.SendPropertyChanging();
					this._COMPLETESTATUS = value;
					this.SendPropertyChanged("COMPLETESTATUS");
					this.OnCOMPLETESTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATEOFTEST", DbType="Date NOT NULL")]
		public System.DateTime DATEOFTEST
		{
			get
			{
				return this._DATEOFTEST;
			}
			set
			{
				if ((this._DATEOFTEST != value))
				{
					this.OnDATEOFTESTChanging(value);
					this.SendPropertyChanging();
					this._DATEOFTEST = value;
					this.SendPropertyChanged("DATEOFTEST");
					this.OnDATEOFTESTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TIMELEFT", DbType="Int NOT NULL")]
		public int TIMELEFT
		{
			get
			{
				return this._TIMELEFT;
			}
			set
			{
				if ((this._TIMELEFT != value))
				{
					this.OnTIMELEFTChanging(value);
					this.SendPropertyChanging();
					this._TIMELEFT = value;
					this.SendPropertyChanged("TIMELEFT");
					this.OnTIMELEFTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEST_PROCESS", Storage="_PROCESSes", ThisKey="TESTID", OtherKey="TESTID")]
		public EntitySet<PROCESS> PROCESSes
		{
			get
			{
				return this._PROCESSes;
			}
			set
			{
				this._PROCESSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEST_RESULTOFTEST", Storage="_RESULTOFTEST", ThisKey="TESTID", OtherKey="TESTID", IsUnique=true, IsForeignKey=false)]
		public RESULTOFTEST RESULTOFTEST
		{
			get
			{
				return this._RESULTOFTEST.Entity;
			}
			set
			{
				RESULTOFTEST previousValue = this._RESULTOFTEST.Entity;
				if (((previousValue != value) 
							|| (this._RESULTOFTEST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RESULTOFTEST.Entity = null;
						previousValue.TEST = null;
					}
					this._RESULTOFTEST.Entity = value;
					if ((value != null))
					{
						value.TEST = this;
					}
					this.SendPropertyChanged("RESULTOFTEST");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEST_STATISTIC", Storage="_STATISTICs", ThisKey="TESTID", OtherKey="TESTID")]
		public EntitySet<STATISTIC> STATISTICs
		{
			get
			{
				return this._STATISTICs;
			}
			set
			{
				this._STATISTICs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOPIC_TEST", Storage="_TOPIC", ThisKey="TOPICID", OtherKey="TOPICID", IsForeignKey=true)]
		public TOPIC TOPIC
		{
			get
			{
				return this._TOPIC.Entity;
			}
			set
			{
				TOPIC previousValue = this._TOPIC.Entity;
				if (((previousValue != value) 
							|| (this._TOPIC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TOPIC.Entity = null;
						previousValue.TESTs.Remove(this);
					}
					this._TOPIC.Entity = value;
					if ((value != null))
					{
						value.TESTs.Add(this);
						this._TOPICID = value.TOPICID;
					}
					else
					{
						this._TOPICID = default(string);
					}
					this.SendPropertyChanged("TOPIC");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_TEST", Storage="_USERACCOUNT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.TESTs.Remove(this);
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.TESTs.Add(this);
						this._PERSONALID = value.PERSONALID;
					}
					else
					{
						this._PERSONALID = default(string);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PROCESSes(PROCESS entity)
		{
			this.SendPropertyChanging();
			entity.TEST = this;
		}
		
		private void detach_PROCESSes(PROCESS entity)
		{
			this.SendPropertyChanging();
			entity.TEST = null;
		}
		
		private void attach_STATISTICs(STATISTIC entity)
		{
			this.SendPropertyChanging();
			entity.TEST = this;
		}
		
		private void detach_STATISTICs(STATISTIC entity)
		{
			this.SendPropertyChanging();
			entity.TEST = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TOPIC")]
	public partial class TOPIC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TOPICID;
		
		private string _SUBJECTID;
		
		private string _GRADEID;
		
		private int _TOTALTIME;
		
		private EntitySet<TRAININGHISTORY> _TRAININGHISTORies;
		
		private EntitySet<EXAM_DETAIL> _EXAM_DETAILs;
		
		private EntitySet<TEST> _TESTs;
		
		private EntitySet<TOPIC_DETAIL> _TOPIC_DETAILs;
		
		private EntityRef<GRADE> _GRADE;
		
		private EntityRef<SUBJECT> _SUBJECT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTOPICIDChanging(string value);
    partial void OnTOPICIDChanged();
    partial void OnSUBJECTIDChanging(string value);
    partial void OnSUBJECTIDChanged();
    partial void OnGRADEIDChanging(string value);
    partial void OnGRADEIDChanged();
    partial void OnTOTALTIMEChanging(int value);
    partial void OnTOTALTIMEChanged();
    #endregion
		
		public TOPIC()
		{
			this._TRAININGHISTORies = new EntitySet<TRAININGHISTORY>(new Action<TRAININGHISTORY>(this.attach_TRAININGHISTORies), new Action<TRAININGHISTORY>(this.detach_TRAININGHISTORies));
			this._EXAM_DETAILs = new EntitySet<EXAM_DETAIL>(new Action<EXAM_DETAIL>(this.attach_EXAM_DETAILs), new Action<EXAM_DETAIL>(this.detach_EXAM_DETAILs));
			this._TESTs = new EntitySet<TEST>(new Action<TEST>(this.attach_TESTs), new Action<TEST>(this.detach_TESTs));
			this._TOPIC_DETAILs = new EntitySet<TOPIC_DETAIL>(new Action<TOPIC_DETAIL>(this.attach_TOPIC_DETAILs), new Action<TOPIC_DETAIL>(this.detach_TOPIC_DETAILs));
			this._GRADE = default(EntityRef<GRADE>);
			this._SUBJECT = default(EntityRef<SUBJECT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOPICID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TOPICID
		{
			get
			{
				return this._TOPICID;
			}
			set
			{
				if ((this._TOPICID != value))
				{
					this.OnTOPICIDChanging(value);
					this.SendPropertyChanging();
					this._TOPICID = value;
					this.SendPropertyChanged("TOPICID");
					this.OnTOPICIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUBJECTID", DbType="VarChar(10)")]
		public string SUBJECTID
		{
			get
			{
				return this._SUBJECTID;
			}
			set
			{
				if ((this._SUBJECTID != value))
				{
					if (this._SUBJECT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSUBJECTIDChanging(value);
					this.SendPropertyChanging();
					this._SUBJECTID = value;
					this.SendPropertyChanged("SUBJECTID");
					this.OnSUBJECTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GRADEID", DbType="VarChar(10)")]
		public string GRADEID
		{
			get
			{
				return this._GRADEID;
			}
			set
			{
				if ((this._GRADEID != value))
				{
					if (this._GRADE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGRADEIDChanging(value);
					this.SendPropertyChanging();
					this._GRADEID = value;
					this.SendPropertyChanged("GRADEID");
					this.OnGRADEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTALTIME", DbType="Int NOT NULL")]
		public int TOTALTIME
		{
			get
			{
				return this._TOTALTIME;
			}
			set
			{
				if ((this._TOTALTIME != value))
				{
					this.OnTOTALTIMEChanging(value);
					this.SendPropertyChanging();
					this._TOTALTIME = value;
					this.SendPropertyChanged("TOTALTIME");
					this.OnTOTALTIMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOPIC_TRAININGHISTORY", Storage="_TRAININGHISTORies", ThisKey="TOPICID", OtherKey="TOPICID")]
		public EntitySet<TRAININGHISTORY> TRAININGHISTORies
		{
			get
			{
				return this._TRAININGHISTORies;
			}
			set
			{
				this._TRAININGHISTORies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOPIC_EXAM_DETAIL", Storage="_EXAM_DETAILs", ThisKey="TOPICID", OtherKey="TOPICID")]
		public EntitySet<EXAM_DETAIL> EXAM_DETAILs
		{
			get
			{
				return this._EXAM_DETAILs;
			}
			set
			{
				this._EXAM_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOPIC_TEST", Storage="_TESTs", ThisKey="TOPICID", OtherKey="TOPICID")]
		public EntitySet<TEST> TESTs
		{
			get
			{
				return this._TESTs;
			}
			set
			{
				this._TESTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOPIC_TOPIC_DETAIL", Storage="_TOPIC_DETAILs", ThisKey="TOPICID", OtherKey="TOPICID")]
		public EntitySet<TOPIC_DETAIL> TOPIC_DETAILs
		{
			get
			{
				return this._TOPIC_DETAILs;
			}
			set
			{
				this._TOPIC_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GRADE_TOPIC", Storage="_GRADE", ThisKey="GRADEID", OtherKey="GRADEID", IsForeignKey=true)]
		public GRADE GRADE
		{
			get
			{
				return this._GRADE.Entity;
			}
			set
			{
				GRADE previousValue = this._GRADE.Entity;
				if (((previousValue != value) 
							|| (this._GRADE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GRADE.Entity = null;
						previousValue.TOPICs.Remove(this);
					}
					this._GRADE.Entity = value;
					if ((value != null))
					{
						value.TOPICs.Add(this);
						this._GRADEID = value.GRADEID;
					}
					else
					{
						this._GRADEID = default(string);
					}
					this.SendPropertyChanged("GRADE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUBJECT_TOPIC", Storage="_SUBJECT", ThisKey="SUBJECTID", OtherKey="SUBJECTID", IsForeignKey=true)]
		public SUBJECT SUBJECT
		{
			get
			{
				return this._SUBJECT.Entity;
			}
			set
			{
				SUBJECT previousValue = this._SUBJECT.Entity;
				if (((previousValue != value) 
							|| (this._SUBJECT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SUBJECT.Entity = null;
						previousValue.TOPICs.Remove(this);
					}
					this._SUBJECT.Entity = value;
					if ((value != null))
					{
						value.TOPICs.Add(this);
						this._SUBJECTID = value.SUBJECTID;
					}
					else
					{
						this._SUBJECTID = default(string);
					}
					this.SendPropertyChanged("SUBJECT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TRAININGHISTORies(TRAININGHISTORY entity)
		{
			this.SendPropertyChanging();
			entity.TOPIC = this;
		}
		
		private void detach_TRAININGHISTORies(TRAININGHISTORY entity)
		{
			this.SendPropertyChanging();
			entity.TOPIC = null;
		}
		
		private void attach_EXAM_DETAILs(EXAM_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.TOPIC = this;
		}
		
		private void detach_EXAM_DETAILs(EXAM_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.TOPIC = null;
		}
		
		private void attach_TESTs(TEST entity)
		{
			this.SendPropertyChanging();
			entity.TOPIC = this;
		}
		
		private void detach_TESTs(TEST entity)
		{
			this.SendPropertyChanging();
			entity.TOPIC = null;
		}
		
		private void attach_TOPIC_DETAILs(TOPIC_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.TOPIC = this;
		}
		
		private void detach_TOPIC_DETAILs(TOPIC_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.TOPIC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TOPIC_DETAILS")]
	public partial class TOPIC_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TOPICID;
		
		private string _QUESTIONID;
		
		private string _NOTES;
		
		private EntityRef<TOPIC> _TOPIC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTOPICIDChanging(string value);
    partial void OnTOPICIDChanged();
    partial void OnQUESTIONIDChanging(string value);
    partial void OnQUESTIONIDChanged();
    partial void OnNOTESChanging(string value);
    partial void OnNOTESChanged();
    #endregion
		
		public TOPIC_DETAIL()
		{
			this._TOPIC = default(EntityRef<TOPIC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOPICID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TOPICID
		{
			get
			{
				return this._TOPICID;
			}
			set
			{
				if ((this._TOPICID != value))
				{
					if (this._TOPIC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTOPICIDChanging(value);
					this.SendPropertyChanging();
					this._TOPICID = value;
					this.SendPropertyChanged("TOPICID");
					this.OnTOPICIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUESTIONID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string QUESTIONID
		{
			get
			{
				return this._QUESTIONID;
			}
			set
			{
				if ((this._QUESTIONID != value))
				{
					this.OnQUESTIONIDChanging(value);
					this.SendPropertyChanging();
					this._QUESTIONID = value;
					this.SendPropertyChanged("QUESTIONID");
					this.OnQUESTIONIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOTES", DbType="NVarChar(100)")]
		public string NOTES
		{
			get
			{
				return this._NOTES;
			}
			set
			{
				if ((this._NOTES != value))
				{
					this.OnNOTESChanging(value);
					this.SendPropertyChanging();
					this._NOTES = value;
					this.SendPropertyChanged("NOTES");
					this.OnNOTESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TOPIC_TOPIC_DETAIL", Storage="_TOPIC", ThisKey="TOPICID", OtherKey="TOPICID", IsForeignKey=true)]
		public TOPIC TOPIC
		{
			get
			{
				return this._TOPIC.Entity;
			}
			set
			{
				TOPIC previousValue = this._TOPIC.Entity;
				if (((previousValue != value) 
							|| (this._TOPIC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TOPIC.Entity = null;
						previousValue.TOPIC_DETAILs.Remove(this);
					}
					this._TOPIC.Entity = value;
					if ((value != null))
					{
						value.TOPIC_DETAILs.Add(this);
						this._TOPICID = value.TOPICID;
					}
					else
					{
						this._TOPICID = default(string);
					}
					this.SendPropertyChanged("TOPIC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRAINING")]
	public partial class TRAINING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TRAININGID;
		
		private string _PERSONALID;
		
		private double _OVERALLPROPERBILITY;
		
		private int _TOTALCOMPLETED;
		
		private EntitySet<TRAININGHISTORY> _TRAININGHISTORies;
		
		private EntityRef<USERACCOUNT> _USERACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTRAININGIDChanging(string value);
    partial void OnTRAININGIDChanged();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnOVERALLPROPERBILITYChanging(double value);
    partial void OnOVERALLPROPERBILITYChanged();
    partial void OnTOTALCOMPLETEDChanging(int value);
    partial void OnTOTALCOMPLETEDChanged();
    #endregion
		
		public TRAINING()
		{
			this._TRAININGHISTORies = new EntitySet<TRAININGHISTORY>(new Action<TRAININGHISTORY>(this.attach_TRAININGHISTORies), new Action<TRAININGHISTORY>(this.detach_TRAININGHISTORies));
			this._USERACCOUNT = default(EntityRef<USERACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRAININGID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TRAININGID
		{
			get
			{
				return this._TRAININGID;
			}
			set
			{
				if ((this._TRAININGID != value))
				{
					this.OnTRAININGIDChanging(value);
					this.SendPropertyChanging();
					this._TRAININGID = value;
					this.SendPropertyChanged("TRAININGID");
					this.OnTRAININGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10)")]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					if (this._USERACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OVERALLPROPERBILITY", DbType="Float NOT NULL")]
		public double OVERALLPROPERBILITY
		{
			get
			{
				return this._OVERALLPROPERBILITY;
			}
			set
			{
				if ((this._OVERALLPROPERBILITY != value))
				{
					this.OnOVERALLPROPERBILITYChanging(value);
					this.SendPropertyChanging();
					this._OVERALLPROPERBILITY = value;
					this.SendPropertyChanged("OVERALLPROPERBILITY");
					this.OnOVERALLPROPERBILITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTALCOMPLETED", DbType="Int NOT NULL")]
		public int TOTALCOMPLETED
		{
			get
			{
				return this._TOTALCOMPLETED;
			}
			set
			{
				if ((this._TOTALCOMPLETED != value))
				{
					this.OnTOTALCOMPLETEDChanging(value);
					this.SendPropertyChanging();
					this._TOTALCOMPLETED = value;
					this.SendPropertyChanged("TOTALCOMPLETED");
					this.OnTOTALCOMPLETEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRAINING_TRAININGHISTORY", Storage="_TRAININGHISTORies", ThisKey="TRAININGID", OtherKey="TRAININGID")]
		public EntitySet<TRAININGHISTORY> TRAININGHISTORies
		{
			get
			{
				return this._TRAININGHISTORies;
			}
			set
			{
				this._TRAININGHISTORies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_TRAINING", Storage="_USERACCOUNT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsForeignKey=true)]
		public USERACCOUNT USERACCOUNT
		{
			get
			{
				return this._USERACCOUNT.Entity;
			}
			set
			{
				USERACCOUNT previousValue = this._USERACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._USERACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USERACCOUNT.Entity = null;
						previousValue.TRAININGs.Remove(this);
					}
					this._USERACCOUNT.Entity = value;
					if ((value != null))
					{
						value.TRAININGs.Add(this);
						this._PERSONALID = value.PERSONALID;
					}
					else
					{
						this._PERSONALID = default(string);
					}
					this.SendPropertyChanged("USERACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TRAININGHISTORies(TRAININGHISTORY entity)
		{
			this.SendPropertyChanging();
			entity.TRAINING = this;
		}
		
		private void detach_TRAININGHISTORies(TRAININGHISTORY entity)
		{
			this.SendPropertyChanging();
			entity.TRAINING = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERACCOUNTS")]
	public partial class USERACCOUNT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PERSONALID;
		
		private string _PASS;
		
		private int _USERLEVEL;
		
		private string _EMAIL;
		
		private EntityRef<ADMINISTRATOR> _ADMINISTRATOR;
		
		private EntitySet<EXAM_DETAIL> _EXAM_DETAILs;
		
		private EntitySet<QUESTIONSSTORAGE> _QUESTIONSSTORAGEs;
		
		private EntitySet<SCHEDULE> _SCHEDULEs;
		
		private EntityRef<STUDENT> _STUDENT;
		
		private EntityRef<TEACHER> _TEACHER;
		
		private EntitySet<TEST> _TESTs;
		
		private EntitySet<TRAINING> _TRAININGs;
		
		private EntityRef<PERMISSION> _PERMISSION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPERSONALIDChanging(string value);
    partial void OnPERSONALIDChanged();
    partial void OnPASSChanging(string value);
    partial void OnPASSChanged();
    partial void OnUSERLEVELChanging(int value);
    partial void OnUSERLEVELChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    #endregion
		
		public USERACCOUNT()
		{
			this._ADMINISTRATOR = default(EntityRef<ADMINISTRATOR>);
			this._EXAM_DETAILs = new EntitySet<EXAM_DETAIL>(new Action<EXAM_DETAIL>(this.attach_EXAM_DETAILs), new Action<EXAM_DETAIL>(this.detach_EXAM_DETAILs));
			this._QUESTIONSSTORAGEs = new EntitySet<QUESTIONSSTORAGE>(new Action<QUESTIONSSTORAGE>(this.attach_QUESTIONSSTORAGEs), new Action<QUESTIONSSTORAGE>(this.detach_QUESTIONSSTORAGEs));
			this._SCHEDULEs = new EntitySet<SCHEDULE>(new Action<SCHEDULE>(this.attach_SCHEDULEs), new Action<SCHEDULE>(this.detach_SCHEDULEs));
			this._STUDENT = default(EntityRef<STUDENT>);
			this._TEACHER = default(EntityRef<TEACHER>);
			this._TESTs = new EntitySet<TEST>(new Action<TEST>(this.attach_TESTs), new Action<TEST>(this.detach_TESTs));
			this._TRAININGs = new EntitySet<TRAINING>(new Action<TRAINING>(this.attach_TRAININGs), new Action<TRAINING>(this.detach_TRAININGs));
			this._PERMISSION = default(EntityRef<PERMISSION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PERSONALID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PERSONALID
		{
			get
			{
				return this._PERSONALID;
			}
			set
			{
				if ((this._PERSONALID != value))
				{
					this.OnPERSONALIDChanging(value);
					this.SendPropertyChanging();
					this._PERSONALID = value;
					this.SendPropertyChanged("PERSONALID");
					this.OnPERSONALIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASS", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PASS
		{
			get
			{
				return this._PASS;
			}
			set
			{
				if ((this._PASS != value))
				{
					this.OnPASSChanging(value);
					this.SendPropertyChanging();
					this._PASS = value;
					this.SendPropertyChanged("PASS");
					this.OnPASSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERLEVEL", DbType="Int NOT NULL")]
		public int USERLEVEL
		{
			get
			{
				return this._USERLEVEL;
			}
			set
			{
				if ((this._USERLEVEL != value))
				{
					if (this._PERMISSION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSERLEVELChanging(value);
					this.SendPropertyChanging();
					this._USERLEVEL = value;
					this.SendPropertyChanged("USERLEVEL");
					this.OnUSERLEVELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_ADMINISTRATOR", Storage="_ADMINISTRATOR", ThisKey="PERSONALID", OtherKey="PERSONALID", IsUnique=true, IsForeignKey=false)]
		public ADMINISTRATOR ADMINISTRATOR
		{
			get
			{
				return this._ADMINISTRATOR.Entity;
			}
			set
			{
				ADMINISTRATOR previousValue = this._ADMINISTRATOR.Entity;
				if (((previousValue != value) 
							|| (this._ADMINISTRATOR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ADMINISTRATOR.Entity = null;
						previousValue.USERACCOUNT = null;
					}
					this._ADMINISTRATOR.Entity = value;
					if ((value != null))
					{
						value.USERACCOUNT = this;
					}
					this.SendPropertyChanged("ADMINISTRATOR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_EXAM_DETAIL", Storage="_EXAM_DETAILs", ThisKey="PERSONALID", OtherKey="PERSONALID")]
		public EntitySet<EXAM_DETAIL> EXAM_DETAILs
		{
			get
			{
				return this._EXAM_DETAILs;
			}
			set
			{
				this._EXAM_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_QUESTIONSSTORAGE", Storage="_QUESTIONSSTORAGEs", ThisKey="PERSONALID", OtherKey="PERSONALID")]
		public EntitySet<QUESTIONSSTORAGE> QUESTIONSSTORAGEs
		{
			get
			{
				return this._QUESTIONSSTORAGEs;
			}
			set
			{
				this._QUESTIONSSTORAGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_SCHEDULE", Storage="_SCHEDULEs", ThisKey="PERSONALID", OtherKey="PERSONALID")]
		public EntitySet<SCHEDULE> SCHEDULEs
		{
			get
			{
				return this._SCHEDULEs;
			}
			set
			{
				this._SCHEDULEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_STUDENT", Storage="_STUDENT", ThisKey="PERSONALID", OtherKey="PERSONALID", IsUnique=true, IsForeignKey=false)]
		public STUDENT STUDENT
		{
			get
			{
				return this._STUDENT.Entity;
			}
			set
			{
				STUDENT previousValue = this._STUDENT.Entity;
				if (((previousValue != value) 
							|| (this._STUDENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STUDENT.Entity = null;
						previousValue.USERACCOUNT = null;
					}
					this._STUDENT.Entity = value;
					if ((value != null))
					{
						value.USERACCOUNT = this;
					}
					this.SendPropertyChanged("STUDENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_TEACHER", Storage="_TEACHER", ThisKey="PERSONALID", OtherKey="PERSONALID", IsUnique=true, IsForeignKey=false)]
		public TEACHER TEACHER
		{
			get
			{
				return this._TEACHER.Entity;
			}
			set
			{
				TEACHER previousValue = this._TEACHER.Entity;
				if (((previousValue != value) 
							|| (this._TEACHER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEACHER.Entity = null;
						previousValue.USERACCOUNT = null;
					}
					this._TEACHER.Entity = value;
					if ((value != null))
					{
						value.USERACCOUNT = this;
					}
					this.SendPropertyChanged("TEACHER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_TEST", Storage="_TESTs", ThisKey="PERSONALID", OtherKey="PERSONALID")]
		public EntitySet<TEST> TESTs
		{
			get
			{
				return this._TESTs;
			}
			set
			{
				this._TESTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USERACCOUNT_TRAINING", Storage="_TRAININGs", ThisKey="PERSONALID", OtherKey="PERSONALID")]
		public EntitySet<TRAINING> TRAININGs
		{
			get
			{
				return this._TRAININGs;
			}
			set
			{
				this._TRAININGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERMISSION_USERACCOUNT", Storage="_PERMISSION", ThisKey="USERLEVEL", OtherKey="PERMISSIONID", IsForeignKey=true)]
		public PERMISSION PERMISSION
		{
			get
			{
				return this._PERMISSION.Entity;
			}
			set
			{
				PERMISSION previousValue = this._PERMISSION.Entity;
				if (((previousValue != value) 
							|| (this._PERMISSION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PERMISSION.Entity = null;
						previousValue.USERACCOUNTs.Remove(this);
					}
					this._PERMISSION.Entity = value;
					if ((value != null))
					{
						value.USERACCOUNTs.Add(this);
						this._USERLEVEL = value.PERMISSIONID;
					}
					else
					{
						this._USERLEVEL = default(int);
					}
					this.SendPropertyChanged("PERMISSION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EXAM_DETAILs(EXAM_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = this;
		}
		
		private void detach_EXAM_DETAILs(EXAM_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = null;
		}
		
		private void attach_QUESTIONSSTORAGEs(QUESTIONSSTORAGE entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = this;
		}
		
		private void detach_QUESTIONSSTORAGEs(QUESTIONSSTORAGE entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = null;
		}
		
		private void attach_SCHEDULEs(SCHEDULE entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = this;
		}
		
		private void detach_SCHEDULEs(SCHEDULE entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = null;
		}
		
		private void attach_TESTs(TEST entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = this;
		}
		
		private void detach_TESTs(TEST entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = null;
		}
		
		private void attach_TRAININGs(TRAINING entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = this;
		}
		
		private void detach_TRAININGs(TRAINING entity)
		{
			this.SendPropertyChanging();
			entity.USERACCOUNT = null;
		}
	}
}
#pragma warning restore 1591
